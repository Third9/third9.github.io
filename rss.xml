<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Blog by Third9]]></title><description><![CDATA[Blog by Third9]]></description><link>https://third9.netlify.com</link><generator>GatsbyJS</generator><lastBuildDate>Wed, 13 Nov 2019 14:37:37 GMT</lastBuildDate><item><title><![CDATA[SSL 인증서 정보 추출 및 검증]]></title><description><![CDATA[cryptography와 OpenSSL 모듈을 이용하여 SSL 인증서의 정보 추출 및 활용.]]></description><link>https://third9.netlify.com/posts/SSL_인증서_정보 추출 및 검증/</link><guid isPermaLink="false">https://third9.netlify.com/posts/SSL_인증서_정보 추출 및 검증/</guid><pubDate>Tue, 12 Nov 2019 08:12:20 GMT</pubDate><content:encoded>&lt;h2 id=&quot;cryptography-를-이용한-인증서-정보-추출&quot;&gt;&lt;a href=&quot;#cryptography-%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%9D%B8%EC%A6%9D%EC%84%9C-%EC%A0%95%EB%B3%B4-%EC%B6%94%EC%B6%9C&quot; aria-label=&quot;cryptography 를 이용한 인증서 정보 추출 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href=&quot;https://cryptography.io/en/latest/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Cryptography&lt;/a&gt; 를 이용한 인증서 정보 추출&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;Cryptography 모듈을 호출하여 인증서 내용을 불러오는 것으로 시작한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;아래의 load&lt;em&gt;pem&lt;/em&gt;x509_certificate()를 통해서 인증서의 정보를 가져올 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; cryptography &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; x509
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; cryptography&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;hazmat&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;backends &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; default_backend

cert_pem &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;인증서의 내용&quot;&lt;/span&gt;
cert &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; x509&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;load_pem_x509_certificate&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cert_pem&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; default_backend&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;인증서 Version 확인&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 위의 코드에서부터 연결되어 내려온다.&lt;/span&gt;
cert&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;version&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;인증서 Fingerprint&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; cryptography&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;hazmat&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;primitives &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; hashes

&lt;span class=&quot;token comment&quot;&gt;# 암호화 타입에 따라서 fingerprint의 정보는 달라짐., &lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# browser에서 인증서 정보를 보면 fingerprint의 암호화 타입도 같이 확인이 됨 &lt;/span&gt;
fingerprint &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; cert&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fingerprint&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;hashes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SHA1&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
fingerprint &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; fingerprint&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;encode&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;hex&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;serial_number&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 인증서의 serial number 를 가져온다&lt;/span&gt;
cert&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;serial_number

&lt;span class=&quot;token comment&quot;&gt;# 단, browser에서 표시되는 인증서 정보에서의 값과 유사하게 만들어 주기 위해서는 아래의 추가 작업이 필요하다.&lt;/span&gt;
serial &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cert&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;serial_number&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
serial &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; serial&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;rstrip&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;L&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lstrip&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;0x&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
serial &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; serial&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;zfill&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;34&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
serial_list &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;serial&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;s&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; s &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;serial&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;인증서 등록일자&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;cert&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;not_valid_before&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;인증서 만료일자&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;cert&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;not_valid_after&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;인증서의 도메인 추출&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; cryptography&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x509&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;oid &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; NameOID

cert&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;subject&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get_attributes_for_oid&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;NameOID&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;COMMON_NAME&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;인증서 발급기관 추출&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; cryptography&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;x509&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;oid &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; NameOID


cert&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;issuer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get_attributes_for_oid&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;NameOID&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;COMMON_NAME&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;public key 추출&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; cryptography&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;hazmat&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;primitives &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; serialization

&lt;span class=&quot;token comment&quot;&gt;# 인증키를 통해서 public-key를 추출한다.&lt;/span&gt;
public_key &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; cert&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;public_key&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
pem &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; public_key&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;public_bytes&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
	encoding&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;serialization&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Encoding&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PEM&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;token builtin&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;serialization&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PublicFormat&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SubjectPublicKeyInfo
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Private key 인증서를 가져오는 방법&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; cryptography&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;hazmat&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;backends &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; default_backend
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; cryptography&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;hazmat&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;primitives &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; serialization


private_key_pem &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;개인 키 내용&quot;&lt;/span&gt;
private_key &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; serialization&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;load_pem_private_key&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
	private_key_pem&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    password&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
	backend&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;default_backend&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;openssl-모듈을-이용한-인증서-검증&quot;&gt;&lt;a href=&quot;#openssl-%EB%AA%A8%EB%93%88%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%9D%B8%EC%A6%9D%EC%84%9C-%EA%B2%80%EC%A6%9D&quot; aria-label=&quot;openssl 모듈을 이용한 인증서 검증 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;OpenSSL 모듈을 이용한 인증서 검증&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;OpenSSL 모듈을 이용하여 인증서와 개인키의 유효성 검증 및 체인 키와 인증서의 유효성 검증을 진행한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;기본적인 모듈 호춢 및 인증서들에 대한 변수선언을 아래와 같이 해준다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; OpenSSL

certificate &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;인증서 내용&quot;&lt;/span&gt;
private_key &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;개인 키 내용&quot;&lt;/span&gt;
chain_auth_key &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;체인키 내용&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;인증서와 개인 키간의 검증 과정&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 개인키와 인증서를 OpenSSL의 객체로 생성&lt;/span&gt;
pk_obj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; OpenSSL&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;crypto&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;load_privatekey&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;crypto&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;FILETYPE_PEM&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; private_key&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
cert_obj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; OpenSSL&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;crypto&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;load_certificate&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;crypto&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;FILETYPE_PEM&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; certificate&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# Context 객체에 인증키와 개인키를 입력 한 후 check&lt;/span&gt;
context &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; OpenSSL&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SSL&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Context&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;OpenSSL&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SSL&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;TLSv1_METHOD&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;use_privatekey&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pk_obj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;use_certificate&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cert_obj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# 인증서와 개인키가 서로 유효한 경우 error 발생하지 않음&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
	context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;check_privatekey&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;except&lt;/span&gt; OpenSSL&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;SSL&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Error &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;do not match&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;일부 인증서의 경우 인증서를 발급받은 기관에 따라서 올바르지 않은 인증서라고 나오는 경우가 있는데, 이러한 문제를 해결하기 위해서 &lt;code class=&quot;language-text&quot;&gt;체인 인증서&lt;/code&gt;를 추가로 등록한다.
아래의 경우는 그 &lt;code class=&quot;language-text&quot;&gt;체인 인증서&lt;/code&gt;가 올바른지 인증하기 위한 검토 logic 이다.
해당 내용은 해당 &lt;a href=&quot;https://stackoverflow.com/a/46554359/4443380&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;링크&lt;/a&gt;를 참조하였다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;인증서와 Chain Key간의 검증&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; re

&lt;span class=&quot;token comment&quot;&gt;# Chain Key의 경우 여러개의 인증서 내용이 연달아 있으므로 인증서들의 유효성 및 List 형태로 분리을 위한 &lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# regular expression을 이용하여 처리&lt;/span&gt;
PEM_RE &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; re&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;b&apos;-----BEGIN CERTIFICATE-----\r?.+?\r?-----END CERTIFICATE-----\r?\n?&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; re&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DOTALL&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# Chain Key에서 인증서내용들을 List 타입으로 분리&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;parse_chain&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;chain&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;group&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; c &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; PEM_RE&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;finditer&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;chain&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

store &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; OpenSSL&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;crypto&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;X509Store&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;token comment&quot;&gt;# 분리한 key 값들을 store에 저장.&lt;/span&gt;
	&lt;span class=&quot;token comment&quot;&gt;# store에 인증서 등록시에 인증서의 방식(type, encode)이 잘못된 경우 error 발생&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; cr &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; parse_chain&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;chain_auth_key&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
	  store&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;add_cert&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;OpenSSL&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;crypto&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;load_certificate&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;OpenSSL&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;crypto&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;FILETYPE_PEM&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; cr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;except&lt;/span&gt; OpenSSL&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;crypto&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Error &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Encode Type Error&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# store에 등록된 인증서들과 certificate를 비교하기 위한 context 객체 생성&lt;/span&gt;
context &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; OpenSSL&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;crypto&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;X509StoreContext&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;store&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; cert_obj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;token comment&quot;&gt;# verify_certificate method를 이용하여 유효성 검증&lt;/span&gt;
	context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;verify_certificate&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;except&lt;/span&gt; OpenSSL&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;crypto&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;X509StoreContextError &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;unable to get local issuer certificate&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[DRF(Django-Rest-Framework)를 이용한 pagination/search 기능 구현]]></title><description><![CDATA[django-rest-framework를 이용하여 pagination/Search 기능을 구현하는 법을 설명.]]></description><link>https://third9.netlify.com/posts/DRF(Django-Rest-Framework)를_이용한_pagination/search_기능_구현/</link><guid isPermaLink="false">https://third9.netlify.com/posts/DRF(Django-Rest-Framework)를_이용한_pagination/search_기능_구현/</guid><pubDate>Mon, 11 Nov 2019 10:30:33 GMT</pubDate><content:encoded>&lt;blockquote&gt;
&lt;p&gt;django-rest-framework를 이용하여 pagination/Search 기능을 구현하는 법을 설명., 모듈의 설치와 관련한 사항은 여기서 언급하지 않는다.&lt;/p&gt;
&lt;p&gt;설명을 위한 drf의 버전은 3.2.5 이며, pagination 기능이 drf 3.1 이상부터 추가되었으므로 그 이상읠 버전을 사용해야 한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;pagination-구현&quot;&gt;&lt;a href=&quot;#pagination-%EA%B5%AC%ED%98%84&quot; aria-label=&quot;pagination 구현 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Pagination 구현&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;pagination은 일반적으로 많이 보이는 List 형태의 View에서 많이 사용된다.  &lt;code class=&quot;language-text&quot;&gt;이전페이지&lt;/code&gt;,&lt;code class=&quot;language-text&quot;&gt;다음페이지&lt;/code&gt; 등과 같은 기능을 구현 하는데 직접 구현도 가능하지만 drf의 pagination 기능을 사용하면 손쉽게 처리가 가능하다.&lt;/p&gt;
&lt;p&gt;보통 RestAPI &lt;code class=&quot;language-text&quot;&gt;query-param&lt;/code&gt;에 &lt;code class=&quot;language-text&quot;&gt;?page_size=1&lt;/code&gt; 과 같은 형태로 넘겨진다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;drf의 pagination 구현은 &lt;code class=&quot;language-text&quot;&gt;django&lt;/code&gt;의 &lt;code class=&quot;language-text&quot;&gt;settings.py&lt;/code&gt; 파일을 수정하는 방식과 별도의 class를 만들어서 구현하는 방식이 있다. &lt;code class=&quot;language-text&quot;&gt;settings&lt;/code&gt;를 수정하면 기존의 다른 class 들에 별다른 작업없이 pagination읠 기능 구현 가능 및 해당 drf를 사용중인 RestAPI 전체에 pagination 기능을 구현 할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;settings.py 를 이용한 pagination 적용&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;REST_FRAMEWORK &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&apos;DEFAULT_PAGINATION_CLASS&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;rest_framework.pagination.LimitOffsetPagination&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&apos;PAGE_SIZE&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;전체 API가 아닌 원하는 Class에만 pagination 기능을 구축하려 한다면 아래와 같이 한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# ./api/v1/paginations.py&lt;/span&gt;
&lt;span class=&quot;token triple-quoted-string string&quot;&gt;&apos;&apos;&apos;
별도의 모듈로 분리하지 않아도 된다.
&apos;&apos;&apos;&lt;/span&gt; 

&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; rest_framework&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pagination &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; PageNumberPagination

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;StandardResultsSetPagination&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;PageNumberPagination&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;# page_size를 None으로 할경우 param에서 page_size를 넘기지 않으면 전체 데이터를 가져온다.&lt;/span&gt;
    page_size &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;None&lt;/span&gt;
    page_size_query_param &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;pagesize&apos;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# 자기가 원하는 param&lt;/span&gt;
    max_page_size &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;NotStandardResultsSetPagination&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;PageNumberPagination&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    page_size &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;
    page_size_query_param &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;page&apos;&lt;/span&gt;
    max_page_size &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;위와 같이 pagination 스타일을 분리하여 필요에 맞는 스타일을 가져와서 활용이 가능하다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;특정 api class 에만 pagination 구현&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# ./api/v1/views.py&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; rest_framework &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; viewsets
&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; paginations &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; StandardResultsSetPagination&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; NotStandardResultsSetPagination

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;StandardViewSet&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;viewsets&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ModelViewSet&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
  pagination_class &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; StandardResultsSetPagination
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
  
&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;NotStandardViewSet&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;viewsets&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ModelViewSet&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
  pagination_class &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; NotStandardResultsSetPagination
  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위와 같은 형태로 각 API class 별로 원하는 pagination 스타일을 구현 할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;전체 api class에 pagination 구현&lt;/p&gt;
&lt;p&gt;전체 API에 구현하기 위해서는 앞서 나온 내용처럼 &lt;code class=&quot;language-text&quot;&gt;settings.py&lt;/code&gt;를 수정하여야 하며 &lt;code class=&quot;language-text&quot;&gt;paginations.py&lt;/code&gt; 스타일을 가져와 사용하기 위해서는 아래와 같이 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# settings.py&lt;/span&gt;
REST_FRAMEWORK &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;DEFAULT_PAGINATION_CLASS&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;api.v1.paginations.StandardResultsSetPagination&apos;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위 처럼 코드를 작성하면 별다른 작업없이 pagination 기능의 구현이 가능하다.&lt;/p&gt;
&lt;p&gt;추가로 무한 스크롤과 같은 형태의 구현을 원한다면 &lt;code class=&quot;language-text&quot;&gt;CursorPagination&lt;/code&gt; 모듈을 이용하여 아래와 같은 구현이 가능하다. 방식은 앞서 나온 pagination 방식과 동일 하며  &lt;code class=&quot;language-text&quot;&gt;PageNumberPagination&lt;/code&gt;모듈을  &lt;code class=&quot;language-text&quot;&gt;CursorPagination&lt;/code&gt;모듈로 변경하면 된다. cursor는 page 방식처럼 어느 위치의 데이터인지 사용자 입장에서 알지 못하게 하거나 알 필요가 없을때 유용하다. cursor 방식과 page 방식의 차이는 데이터를 가져오는 기준의 값이 page가 아닌 cursor(id) 방식이라 것에 차이가 있다. 또한 cursor는 &lt;code class=&quot;language-text&quot;&gt;page_size_query_param&lt;/code&gt;가 아닌 &lt;code class=&quot;language-text&quot;&gt;cursor_query_param&lt;/code&gt;을 속성 값으로 가진다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# CursorPagenagtion&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; rest_framework&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pagenation &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; CursorPagination

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;StandardCursorPagination&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;CursorPagination&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    page_size &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;# page의 cursor를 구분하기 위해선 model의 unique한 field를 필요로 한다.&lt;/span&gt;
    cursor_query_param &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;id&apos;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;# 정렬 순서를 특정 필드를 선택하여 정할 수 있다.&lt;/span&gt;
    ordering &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;-log_date&apos;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Sentry server 설치]]></title><description><![CDATA[Error tracking과 Log 관리등을 원격으로 관리할 수 있게 해주는 모니터링 서비스 Sentry를 직접 설치 및 운영한다.]]></description><link>https://third9.netlify.com/posts/sentry_server_설치/</link><guid isPermaLink="false">https://third9.netlify.com/posts/sentry_server_설치/</guid><pubDate>Mon, 11 Nov 2019 10:27:46 GMT</pubDate><content:encoded>&lt;h2 id=&quot;sentry&quot;&gt;&lt;a href=&quot;#sentry&quot; aria-label=&quot;sentry permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Sentry&lt;/h2&gt;
&lt;p&gt;Error tracking과 Log 관리등을 원격으로 관리할 수 있게 해주는 모니터링 Server&lt;/p&gt;
&lt;h2 id=&quot;sentry-서버-설치&quot;&gt;&lt;a href=&quot;#sentry-%EC%84%9C%EB%B2%84-%EC%84%A4%EC%B9%98&quot; aria-label=&quot;sentry 서버 설치 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Sentry 서버 설치&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Ubuntu:14.04&lt;/li&gt;
&lt;li&gt;python:2.7&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;설치를 위한 기본 환경은 위와 같으며 sentry 설치 전 몇가지 setting을 해주어야 한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;sentry 의 원할한 설치 및 구동을 위해서 sentry라는 명칭의 계정을 생성한다&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 해당 명령어 실행 후 나오는 입력 내용을 순차적으로 입력한다.(Id, password, name 등등)&lt;/span&gt;
$ adduser sentry&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;sentry 설치를 위한 모듈들 설치&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt-get&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; -y python-pip&lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
	python-setuptools&lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
	python-dev&lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
    libxslt1-dev&lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
    gcc&lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
    libffi-dev&lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
	libjpeg-dev&lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
	libxml2-dev&lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
	libxslt-dev&lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
	libyaml-dev&lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
	libpq-dev
	&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;위의 작업까지 마무리 하였다면 다음으로 worker의 역할과 issue 보관을 위한 redis와 postgresql을 설치해야 한다. worker의 역할은 rabbitMQ도 사용 가능하지만 여기서는 redis를 사용한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;--sentry-연동을-위한-postgresql-설치-및-셋팅-postgresql94&quot;&gt;&lt;a href=&quot;#--sentry-%EC%97%B0%EB%8F%99%EC%9D%84-%EC%9C%84%ED%95%9C-postgresql-%EC%84%A4%EC%B9%98-%EB%B0%8F-%EC%85%8B%ED%8C%85-postgresql94&quot; aria-label=&quot;  sentry 연동을 위한 postgresql 설치 및 셋팅 postgresql94 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;- Sentry 연동을 위한 PostgreSQL 설치 및 셋팅 (PostgreSQL:9.4)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;PostgreSQL은 12.04, 14.04, 16.04 버전의 경우는 ubuntu의 apt repo를 통한 설치를 정상적으로 지원한다.&lt;/p&gt;
&lt;p&gt;또한, 버전에 따라서 설치에 조금씩의 차이가 있는데 해당 방법은 &lt;a href=&quot;https://www.postgresql.org/download/linux/ubuntu/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;링크&lt;/a&gt;를 통해서 안내한다. 여기서는 14.04 버전을 기준으로 안내한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;PostgreSQL 설치&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 우선 pgdg list를 만든다. (이미 존재하는 경우 파일 생성없이 내용만 추가)&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; /etc/apt/sources.list.d/
$ &lt;span class=&quot;token function&quot;&gt;touch&lt;/span&gt; pgdg.list

&lt;span class=&quot;token comment&quot;&gt;# pgdg.list 파일 생성 후 해당 파일내에 아래의 내용을 추가 후 저장한다.&lt;/span&gt;
deb http://apt.postgresql.org/pub/repos/apt/ trusty-pgdg main

&lt;span class=&quot;token comment&quot;&gt;# 이후에 아래의 명령어를 수행한다.&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;wget&lt;/span&gt; --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
	&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; apt-key &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; -
$ &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt-get&lt;/span&gt; update

&lt;span class=&quot;token comment&quot;&gt;# 위의 작업까지 완료하였다면 아래의 명령어로 postgresql을 설치한다.&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;apt-get&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; postgresql-9.4&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PostgreSQL 셋팅 ( PostgreSQL 명령어 &lt;a href=&quot;https://www.postgresql.org/docs/current/static/sql-commands.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;링크&lt;/a&gt;)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# postgresql 관리자 계정이 정상적으로 생성되어 있는지를 확인한다.&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; /etc/password &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;postgres&apos;&lt;/span&gt; 

&lt;span class=&quot;token comment&quot;&gt;# PostgreSQL 작동여부 체크&lt;/span&gt;
$ /etc/init.d/postgresql status

&lt;span class=&quot;token comment&quot;&gt;# 작동중이지 않다면 start 명령을 이용하여 작동시켜준다.(이미 동작중이면 실행하지 않아도 된다.)&lt;/span&gt;
$ /etc/init.d/postgresql start

&lt;span class=&quot;token comment&quot;&gt;## 관리자 계정의 password 변경 및 sentry 계정 생성을 위해서 psql에 접근&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# 관리자 계정 postgres로 접근&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; -u postgres psql template1

&lt;span class=&quot;token comment&quot;&gt;# password 변경&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;template1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# ALTER USER postgres with encrypted password &apos;패스워드&apos;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# sentry 계정 추가 및 LOGIN 권한 부여 (Password는 위에서 postgres 계정에 부여 하듯이 하면 된다.)&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;template1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# CREATE ROLE sentry WITH LOGIN;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# 계정 추가 후 해당 계정에 권한을 추가한다. (sentry 실행시 관련 db등을 생성하기에 sentry 계정 사용시 권한이 있어야 한다.)&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;template1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# ALTER ROLE sentry WITH CREATEDB CREATEROLE;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# 데이터 베이스 권한 부여&lt;/span&gt;
&lt;span class=&quot;token assign-left variable&quot;&gt;template1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;# GRANT ALL ON DATABASE databasename TO username;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# 작업을 모두 마치면 정상적으로 접근 가능한지 Test., 두개의 계정모두 접속 가능한지 test 한다.&lt;/span&gt;
$ psql -h &lt;span class=&quot;token number&quot;&gt;127.0&lt;/span&gt;.0.1 -U postgres template1 
$ psql -h &lt;span class=&quot;token number&quot;&gt;127.0&lt;/span&gt;.0.1 -U sentry template1 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;--redis-설치-및-셋팅-redis329&quot;&gt;&lt;a href=&quot;#--redis-%EC%84%A4%EC%B9%98-%EB%B0%8F-%EC%85%8B%ED%8C%85-redis329&quot; aria-label=&quot;  redis 설치 및 셋팅 redis329 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;- Redis 설치 및 셋팅 (Redis:3.2.9)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Redis의 설치 및 셋팅은 다른 문서(링크)로 대체한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;--sentry-서버-설치-및-셋팅-sentry8180&quot;&gt;&lt;a href=&quot;#--sentry-%EC%84%9C%EB%B2%84-%EC%84%A4%EC%B9%98-%EB%B0%8F-%EC%85%8B%ED%8C%85-sentry8180&quot; aria-label=&quot;  sentry 서버 설치 및 셋팅 sentry8180 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;- Sentry 서버 설치 및 셋팅 (Sentry:8.18.0)&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;sentry는 python기반의 서버이므로 virtualenv를 먼저 설치 한 뒤 가상환경을 셋팅한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# virtualenv install &lt;/span&gt;
$ pip &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; -U virtualenv

&lt;span class=&quot;token comment&quot;&gt;# virtualenv setting&lt;/span&gt;
$ virtualenv ~/.venv/sentry

&lt;span class=&quot;token comment&quot;&gt;# virtualenv activate&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt; ~/.venv/sentry/bin/activate

&lt;span class=&quot;token comment&quot;&gt;# sentry 설치&lt;/span&gt;
$ pip &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; -U sentry&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt; 위의 작업까지 성공적으로 이어졌다면 sentry 서버 구동을 위한 설정 및 실행을 하면 된다. 하지만 정상적으로 구동하지 않고 에러가 출력되면 그에 대응하는 작업을 수행해야 한다.  에러 메시지는 사용자의 상황마다 다르므로 여기서는 2개 정도의 에러에 대해서만 간략히 설명한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;E1: ValueError: jpeg is required unless explicitly disabled using —disable-jpeg, aborting&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;sudo apt-get install libjpeg-dev zlib1g-dev&lt;/code&gt; 수행., 관련 모듈 설치&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;E2: error: command ‘x86_64-linux-gnu-gcc’ failed with exit status 1&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;sudo apt-get install libssl-dev libffi-dev&lt;/code&gt; 수행., 관련 모듈 설치&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;sentry설치를 마쳤다면, sentry 설정을 진행한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# init 파일 생성(기본 생성 위치는 &apos;~/.sentry&apos; 이다)&lt;/span&gt;
$ sentry init &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;경로 위치&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
ex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; sentry init or sentry init /etc/sentry&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;  위의 명령어 실행 후 해당 위치에 생성된 sentry.conf.py 파일을 수정&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# ~/.sentry/sentry.conf.py&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# for more information on DATABASES, see the Django configuration at:&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# https://docs.djangoproject.com/en/1.6/ref/databases/&lt;/span&gt;
DATABASES &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&apos;default&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;&apos;ENGINE&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;sentry.db.postgres&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;&apos;NAME&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;sentry&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;&apos;USER&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;sentry&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# postgresql에 등록한 계정으로 입력&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;&apos;PASSWORD&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;postgresql 계정 password&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;&apos;HOST&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# local인 경우 127.0.0.1&lt;/span&gt;
        &lt;span class=&quot;token string&quot;&gt;&apos;PORT&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# postgresql의 port&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Redis의 경우 기본 설정을 그대로 사용한다면 별도로 수정할 부분은 없다&lt;/p&gt;
&lt;p&gt;mail발송을 위한 설정을 할 수 있지만 여기서는 다루지 않는다(메일서버는 sendmail을 이용하는 것이 일반적이다)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;모든 설정을 마무리 하였으면 순차적으로 명령어를 실행하여 migration 작업을 수행한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# sentry migration&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# DB 생성에 있어서 여기서는 sentry 라는 명칭을 사용한다.&lt;/span&gt;
$ createdb -E utf-8 sentry

&lt;span class=&quot;token comment&quot;&gt;# 아래의 명령을 수행하면 postgresql/redis에 sentry 관련 데이터를 생성하며, sentry 계정을 만들수 있다.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# 이때에 superuser를 만들지 여부를 물어보는데 여기서 만들어야지 이후에 다시 만드는 작업을 하지 않아도 된다.&lt;/span&gt;
$ sentry upgrade

&lt;span class=&quot;token comment&quot;&gt;# 추가로 user를 만들생각이면 아래의 명령어로 만들어 주어도 된다.&lt;/span&gt;
$ sentry createuser&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;migration 까지 마무리 하였다면, 서버를 실행한다. &lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# sentry의 web 서버&lt;/span&gt;
$ sentry run web

&lt;span class=&quot;token comment&quot;&gt;# sentry의 worker&lt;/span&gt;
$ sentry run worker

&lt;span class=&quot;token comment&quot;&gt;# sentry의 cron process&lt;/span&gt;
$ sentry run &lt;span class=&quot;token function&quot;&gt;cron&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# 위와 같이 3개의 서비스를 실행시켜야 정상적인 수행이 가능하다.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.sentry.io/server/installation/python/#setup-a-reverse-proxy&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;nginx 를 이용한 proxy 서버 연동&lt;/a&gt; 및 &lt;a href=&quot;https://docs.sentry.io/server/installation/python/#enabling-ssl&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;SSL 인증&lt;/a&gt;에 대해서는 여기서 다루지 않고 링크를 참조한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;--daemon으로-실행&quot;&gt;&lt;a href=&quot;#--daemon%EC%9C%BC%EB%A1%9C-%EC%8B%A4%ED%96%89&quot; aria-label=&quot;  daemon으로 실행 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;- Daemon으로 실행&lt;/h3&gt;
&lt;p&gt;위의 단계를 모두 진행하였으면 sentry 서버를 실행하고 사용하는데는 문제가 없지만, daemon 형태로 서비스를 수행하기 위해서는 systemd, upstart와 같은 프로그램을 이용해서 안정적으로 사용이 가능하다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 추가적으로 ubuntu 15부터 systemd를 지원하며, LTS 버전으로 한정할 경우 16버전부터 지원을 한다.&lt;/p&gt;
&lt;p&gt;문서에서 설명한 ubuntu 14에서는 upstart를 사용하므로 upstart 스크립트 작성 및 사용법을 기술한다.&lt;/p&gt;
&lt;p&gt;systemd를 이용하여 서비스하는 방법은 &lt;a href=&quot;https://docs.sentry.io/server/installation/python/#running-sentry-as-a-service&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;링크&lt;/a&gt; 참조.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;upstart를 이용하여 daemon을 구동할 경우, 시스템 부팅시의 자동 실행 및 서비스 종료시 자동 재시작 로그파일 기록 등등의 장점이 있다. 우선은 아래의 script를 작성하여야 한다. (예시에서는 web만을 작성하였지만 실제로는 worker, cron 등에 대한 script도 만들어야 한다.)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# upstart에서 수행되는 서비스들의 script는 /etc/init/ 경로에 ***.conf 파일의 형태로 작성해줘야 한다.&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; /etc/init/
$ &lt;span class=&quot;token function&quot;&gt;touch&lt;/span&gt; sentry-web.conf

&lt;span class=&quot;token comment&quot;&gt;# 위에서 생성한 sentry-web.conf 파일을 열어서 script 내용을 등록한다.&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;vim&lt;/span&gt; sentry-web.conf&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위의 작업까지 수행하였다면 아래의 코드를 위에서 만들어둔 &lt;code class=&quot;language-text&quot;&gt;sentry-web.conf&lt;/code&gt; 파일에 작성한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# /etc/init/sentry-web.conf&lt;/span&gt;
start on runlevel &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2346&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
stop on runlevel &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;016&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# 서비스가 오류로 종료시에 자동 재시작&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# (단, 너무 빨리 재시작 되는것에 대한 제한을 수정. 5초 동안 4번 재시작 되면 재시작 하지 않음)&lt;/span&gt;
respawn limit &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;USER&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;www-data
&lt;span class=&quot;token function&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;PATH&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
&lt;span class=&quot;token function&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;PWD&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/usr/local/lib/python2.7/dist-packages

&lt;span class=&quot;token comment&quot;&gt;# script가 수행되기 전 해당 서비스의 log 생성 및 권한 부여&lt;/span&gt;
pre-start script
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; -f /var/log/sentry-web.log &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;touch&lt;/span&gt; /var/log/sentry-web.log
    &lt;span class=&quot;token function&quot;&gt;chown&lt;/span&gt; -f &lt;span class=&quot;token environment constant&quot;&gt;$USER&lt;/span&gt; /var/log/sentry-web.log
  &lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;
end script

&lt;span class=&quot;token comment&quot;&gt;# 서비스 수행을 위한 main script&lt;/span&gt;
script
&lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt; /home/sentry/activate  &lt;span class=&quot;token comment&quot;&gt;# venv 실행&lt;/span&gt;
start-stop-daemon --start &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;# daemon으로 수행&lt;/span&gt;
  --make-pidfile --pidfile /var/run/sentry-web.pid &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# proccess id 파일&lt;/span&gt;
  --chuid &lt;span class=&quot;token environment constant&quot;&gt;$USER&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
  --chdir &lt;span class=&quot;token environment constant&quot;&gt;$PWD&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
  --exec /home/sentry/.venv/sentry/local/bin/sentry&lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
        --config&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/home/sentry/.sentry/&lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# sentry 수행을 위한 환경설정파일&lt;/span&gt;
        run web &lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt; /var/log/sentry-web.log &lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;2&lt;/span&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;&amp;amp;1&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;# web 서비스 수행 및 log stdout/stderr 로그 등록&lt;/span&gt;
end script

&lt;span class=&quot;token comment&quot;&gt;# 서비스 종료시에 process id 삭제&lt;/span&gt;
post-stop script
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; -f /var/run/sentry-web.pid &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; /var/run/sentry-web.pid
  &lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;
end script&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 작성 완료 후  &lt;code class=&quot;language-text&quot;&gt;sudo start sentry-web&lt;/code&gt;  명령어를 실행하면 web이 daemon 으로 수행된다. worker, cron도 위와 같이 script를 작성한 뒤에 실행시켜주면 해당 서비스를 수행할 수 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;나머지 worker, cron에 관련한 script&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# /etc/init/sentry-worker.conf&lt;/span&gt;
start on runlevel &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2345&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
stop on runlevel &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;016&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

respawn limit &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;USER&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;www-data
&lt;span class=&quot;token function&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;PATH&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
&lt;span class=&quot;token function&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;PWD&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/usr/local/lib/python2.7/dist-packages

pre-start script
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; -f /var/log/sentry-web.log &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;touch&lt;/span&gt; /var/log/sentry-worker.log
    &lt;span class=&quot;token function&quot;&gt;chown&lt;/span&gt; -f &lt;span class=&quot;token environment constant&quot;&gt;$USER&lt;/span&gt; /var/log/sentry-worker.log
  &lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;
end script

script
&lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt; /home/sentry/activate
start-stop-daemon --start &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
  --make-pidfile --pidfile /var/run/sentry-worker.pid &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
  --chuid &lt;span class=&quot;token environment constant&quot;&gt;$USER&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
  --chdir &lt;span class=&quot;token environment constant&quot;&gt;$PWD&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
  --exec /home/sentry/.venv/sentry/local/bin/sentry&lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
        -- --config&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/home/sentry/.sentry/&lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
        run worker &lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt; /var/log/sentry-worker.log &lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;2&lt;/span&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;&amp;amp;1&lt;/span&gt;
end script

post-stop script
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; -f /var/run/sentry-worker.pid &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; /var/run/sentry-worker.pid
  &lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;
end script&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# /etc/init/sentry-cron.conf&lt;/span&gt;
start on runlevel &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2345&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
stop on runlevel &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;016&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

respawn limit &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;USER&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;www-data
&lt;span class=&quot;token function&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;PATH&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
&lt;span class=&quot;token function&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;&lt;span class=&quot;token environment constant&quot;&gt;PWD&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/usr/local/lib/python2.7/dist-packages

pre-start script
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; -f /var/log/sentry-cron.log &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;touch&lt;/span&gt; /var/log/sentry-cron.log
    &lt;span class=&quot;token function&quot;&gt;chown&lt;/span&gt; -f &lt;span class=&quot;token environment constant&quot;&gt;$USER&lt;/span&gt; /var/log/sentry-cron.log
  &lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;
end script

script
&lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt; /home/sentry/activate
start-stop-daemon --start &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
  --make-pidfile --pidfile /var/run/sentry-cron.pid &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
  --chuid &lt;span class=&quot;token environment constant&quot;&gt;$USER&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
  --chdir &lt;span class=&quot;token environment constant&quot;&gt;$PWD&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
  --exec /home/sentry/.venv/sentry/local/bin/sentry&lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
        -- --config&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/home/sentry/.sentry/&lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;
        run &lt;span class=&quot;token function&quot;&gt;cron&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt; /var/log/sentry-cron.log &lt;span class=&quot;token operator&quot;&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;2&lt;/span&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token file-descriptor important&quot;&gt;&amp;amp;1&lt;/span&gt;
end script

post-stop script
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; -f /var/run/sentry-cron.pid &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; /var/run/sentry-cron.pid
  &lt;span class=&quot;token keyword&quot;&gt;fi&lt;/span&gt;
end script&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;이전 버전의 경우 환경설정의 경로를 &lt;code class=&quot;language-text&quot;&gt;{your path}/sentry/sentry.conf.py&lt;/code&gt; 로 표기하는 경우가 있는데 그럴경우 secret-key 가 없어서 새로 생성하라는 메시지가 뜨는 경우가 있다. 실제로 secret-key가 없는 경우일수도 있지만, 경로가 잘못되어서 발생하는 문제일 수 있다. 최신버전의 sentry는 config.yaml 파일에 secret-key가 존재하기에 최신버전의 경우 환경설정파일 경로를  &lt;code class=&quot;language-text&quot;&gt;{your path}/sentry/&lt;/code&gt; 로 지정해주어야 한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;sentry-upgrade&quot;&gt;&lt;a href=&quot;#sentry-upgrade&quot; aria-label=&quot;sentry upgrade permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Sentry Upgrade&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;내용 정리 필요. 일단 간단하게 마구 작성함&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;sentry 설치된 서버에 ssh로 접근&lt;/li&gt;
&lt;li&gt;sentry가 설치된 python 환경설정 on&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sentry upgrade &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;pip &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; -U sentry&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;설치 다되면, 설정 파일 새로 만들어줌., 단 무조건 꼭 만들어야 하는건 아니고 나도 새로 안만들고 함 하지만 문서를 보면 major update인 경우에는 설정 파일을 새로 만드는 것을 추천한다고 쓰여 있음.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sentry 업그레이드를 진행함&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;shell&quot;&gt;&lt;pre class=&quot;language-shell&quot;&gt;&lt;code class=&quot;language-shell&quot;&gt;sentry upgrade&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;그대로 진행하면 upgrade가 됨 이제 sentry의 모든 서비스들을 새로 켜줘야함.
web, worker, cron 등을 모두 종료했다가 새로 켜줌., 그러면 upgrade 완료&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;sentry upgrade 참조 링크&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.sentry.io/server/upgrading/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://docs.sentry.io/server/upgrading/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;sentry upgrade&lt;/code&gt; 명령어 실행시 &lt;code class=&quot;language-text&quot;&gt;superuser&lt;/code&gt; 문제에 따른 권한 이슈가 나온다 &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;그럴때 아래 링크 참조&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/getsentry/sentry/issues/6098#issuecomment-329824716&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://github.com/getsentry/sentry/issues/6098#issuecomment-329824716&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;링크 정리 후 내용 정리&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;메일 발송 기능 내용 추가 update 필요&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;config.yaml&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;###############
# Mail Server #
###############

mail.backend: &amp;#39;smtp&amp;#39;  # Use dummy if you want to disable email entirely
mail.host: &amp;#39;kinx.net&amp;#39;
mail.port: 25
mail.username: &amp;#39;&amp;#39;
mail.password: &amp;#39;&amp;#39;
mail.use-tls: false
# The email address to send on behalf of
mail.from: &amp;#39;sentry@kinx.net&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;sentry.conf.py&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;ENV_CONFIG_MAPPING = {
    &amp;#39;SENTRY_EMAIL_PASSWORD&amp;#39;: &amp;#39;mail.password&amp;#39;,
    &amp;#39;SENTRY_EMAIL_USER&amp;#39;: &amp;#39;mail.username&amp;#39;,
    &amp;#39;SENTRY_EMAIL_PORT&amp;#39;: (&amp;#39;mail.port&amp;#39;, Int),
    &amp;#39;SENTRY_EMAIL_USE_TLS&amp;#39;: (&amp;#39;mail.use-tls&amp;#39;, Bool),
    &amp;#39;SENTRY_EMAIL_HOST&amp;#39;: &amp;#39;mail.host&amp;#39;,
    &amp;#39;SENTRY_SERVER_EMAIL&amp;#39;: &amp;#39;mail.from&amp;#39;,
    &amp;#39;SENTRY_ENABLE_EMAIL_REPLIES&amp;#39;: (&amp;#39;mail.enable-replies&amp;#39;, Bool),
    &amp;#39;SENTRY_EMAIL_LIST_NAMESPACE&amp;#39;: &amp;#39;mail.list-namespace&amp;#39;,
    &amp;#39;SENTRY_SMTP_HOSTNAME&amp;#39;: &amp;#39;reply.getsentry.com&amp;#39;,
    &amp;#39;SENTRY_SECRET_KEY&amp;#39;: &amp;#39;system.secret-key&amp;#39;,
    &amp;#39;SENTRY_SMTP_HOST&amp;#39;: &amp;#39;0.0.0.0&amp;#39;,
    &amp;#39;SENTRY_SMTP_PORT&amp;#39;: 1025,


    # If you&amp;#39;re using mailgun for inbound mail, set your API key and configure a
    # route to forward to /api/hooks/mailgun/inbound/
    &amp;#39;SENTRY_MAILGUN_API_KEY&amp;#39;: &amp;#39;mail.mailgun-api-key&amp;#39;,
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;추가로 저런식으로 해도 이상하게 use-tls가 계속 True로 잡히고, domain 주소가 바뀌지 않아서 직접 module 코드를 수정해 줘야함&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sentry/utils/email.py&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;# 설치된 sentry 모듈에서 위의 파일경로를 찾아가서 직접 수정
...
def get_connection(fail_silently=False):
    &amp;quot;&amp;quot;&amp;quot;
    Gets an SMTP connection using our OptionsStore
    &amp;quot;&amp;quot;&amp;quot;
    return _get_connection(
        backend=get_mail_backend(),
        host=&amp;#39;localhost&amp;#39;,
        # host=options.get(&amp;#39;mail.host&amp;#39;),
        port=25,
        # port=options.get(&amp;#39;mail.port&amp;#39;),
        username=options.get(&amp;#39;mail.username&amp;#39;),
        password=options.get(&amp;#39;mail.password&amp;#39;),
        use_tls=False,
        # use_tls=options.get(&amp;#39;mail.use-tls&amp;#39;),
        timeout=options.get(&amp;#39;mail.timeout&amp;#39;),
        fail_silently=fail_silently,
    )
...

...
def send_messages(messages, fail_silently=False):
    connection = get_connection(fail_silently=fail_silently)

    # 아래의 로직은 from_email 주소를 특정 domain으로 수정하기 위한 작업
    for message in messages:
      message.from_email = &amp;#39;sentry@kinx.net&amp;#39;

    sent = connection.send_messages(messages)
    metrics.incr(&amp;#39;email.sent&amp;#39;, len(messages), skip_internal=False)
    for message in messages:
        extra = {
            &amp;#39;message_id&amp;#39;: message.extra_headers[&amp;#39;Message-Id&amp;#39;],
            &amp;#39;size&amp;#39;: len(message.message().as_bytes()),
        }
        logger.info(&amp;#39;mail.sent&amp;#39;, extra=extra)
    return sent
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;</content:encoded></item></channel></rss>