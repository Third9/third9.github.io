{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/Python으로_SSL_인증서_정보 추출 및 검증/","result":{"data":{"markdownRemark":{"id":"903dcb3f-94b3-55fe-9751-d4cd1f9c62a7","html":"<h2 id=\"cryptography-를-이용한-인증서-정보-추출\"><a href=\"#cryptography-%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%9D%B8%EC%A6%9D%EC%84%9C-%EC%A0%95%EB%B3%B4-%EC%B6%94%EC%B6%9C\" aria-label=\"cryptography 를 이용한 인증서 정보 추출 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://cryptography.io/en/latest/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Cryptography</a> 를 이용한 인증서 정보 추출</h2>\n<hr>\n<p>Cryptography 모듈을 호출하여 인증서 내용을 불러오는 것으로 시작한다.</p>\n<ul>\n<li>\n<p>아래의 load<em>pem</em>x509_certificate()를 통해서 인증서의 정보를 가져올 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> cryptography <span class=\"token keyword\">import</span> x509\n<span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>hazmat<span class=\"token punctuation\">.</span>backends <span class=\"token keyword\">import</span> default_backend\n\ncert_pem <span class=\"token operator\">=</span> <span class=\"token string\">\"인증서의 내용\"</span>\ncert <span class=\"token operator\">=</span> x509<span class=\"token punctuation\">.</span>load_pem_x509_certificate<span class=\"token punctuation\">(</span>cert_pem<span class=\"token punctuation\">,</span> default_backend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p>인증서 Version 확인</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 위의 코드에서부터 연결되어 내려온다.</span>\ncert<span class=\"token punctuation\">.</span>version</code></pre></div>\n</li>\n<li>\n<p>인증서 Fingerprint</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>hazmat<span class=\"token punctuation\">.</span>primitives <span class=\"token keyword\">import</span> hashes\n\n<span class=\"token comment\"># 암호화 타입에 따라서 fingerprint의 정보는 달라짐., </span>\n<span class=\"token comment\"># browser에서 인증서 정보를 보면 fingerprint의 암호화 타입도 같이 확인이 됨 </span>\nfingerprint <span class=\"token operator\">=</span> cert<span class=\"token punctuation\">.</span>fingerprint<span class=\"token punctuation\">(</span>hashes<span class=\"token punctuation\">.</span>SHA1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nfingerprint <span class=\"token operator\">=</span> fingerprint<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'hex'</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p>serial_number</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 인증서의 serial number 를 가져온다</span>\ncert<span class=\"token punctuation\">.</span>serial_number\n\n<span class=\"token comment\"># 단, browser에서 표시되는 인증서 정보에서의 값과 유사하게 만들어 주기 위해서는 아래의 추가 작업이 필요하다.</span>\nserial <span class=\"token operator\">=</span> <span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>cert<span class=\"token punctuation\">.</span>serial_number<span class=\"token punctuation\">)</span>\nserial <span class=\"token operator\">=</span> serial<span class=\"token punctuation\">.</span>rstrip<span class=\"token punctuation\">(</span><span class=\"token string\">\"L\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>lstrip<span class=\"token punctuation\">(</span><span class=\"token string\">\"0x\"</span><span class=\"token punctuation\">)</span>\nserial <span class=\"token operator\">=</span> serial<span class=\"token punctuation\">.</span>zfill<span class=\"token punctuation\">(</span><span class=\"token number\">34</span><span class=\"token punctuation\">)</span>\nserial_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>serial<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">:</span>s<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> s <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>serial<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n<li>\n<p>인증서 등록일자</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">cert<span class=\"token punctuation\">.</span>not_valid_before</code></pre></div>\n</li>\n<li>\n<p>인증서 만료일자</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">cert<span class=\"token punctuation\">.</span>not_valid_after</code></pre></div>\n</li>\n<li>\n<p>인증서의 도메인 추출</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>x509<span class=\"token punctuation\">.</span>oid <span class=\"token keyword\">import</span> NameOID\n\ncert<span class=\"token punctuation\">.</span>subject<span class=\"token punctuation\">.</span>get_attributes_for_oid<span class=\"token punctuation\">(</span>NameOID<span class=\"token punctuation\">.</span>COMMON_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value</code></pre></div>\n</li>\n<li>\n<p>인증서 발급기관 추출</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>x509<span class=\"token punctuation\">.</span>oid <span class=\"token keyword\">import</span> NameOID\n\n\ncert<span class=\"token punctuation\">.</span>issuer<span class=\"token punctuation\">.</span>get_attributes_for_oid<span class=\"token punctuation\">(</span>NameOID<span class=\"token punctuation\">.</span>COMMON_NAME<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value</code></pre></div>\n</li>\n<li>\n<p>public key 추출</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>hazmat<span class=\"token punctuation\">.</span>primitives <span class=\"token keyword\">import</span> serialization\n\n<span class=\"token comment\"># 인증키를 통해서 public-key를 추출한다.</span>\npublic_key <span class=\"token operator\">=</span> cert<span class=\"token punctuation\">.</span>public_key<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\npem <span class=\"token operator\">=</span> public_key<span class=\"token punctuation\">.</span>public_bytes<span class=\"token punctuation\">(</span>\n\tencoding<span class=\"token operator\">=</span>serialization<span class=\"token punctuation\">.</span>Encoding<span class=\"token punctuation\">.</span>PEM<span class=\"token punctuation\">,</span>\n\t<span class=\"token builtin\">format</span><span class=\"token operator\">=</span>serialization<span class=\"token punctuation\">.</span>PublicFormat<span class=\"token punctuation\">.</span>SubjectPublicKeyInfo\n<span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p>Private key 인증서를 가져오는 방법</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>hazmat<span class=\"token punctuation\">.</span>backends <span class=\"token keyword\">import</span> default_backend\n<span class=\"token keyword\">from</span> cryptography<span class=\"token punctuation\">.</span>hazmat<span class=\"token punctuation\">.</span>primitives <span class=\"token keyword\">import</span> serialization\n\n\nprivate_key_pem <span class=\"token operator\">=</span> <span class=\"token string\">\"개인 키 내용\"</span>\nprivate_key <span class=\"token operator\">=</span> serialization<span class=\"token punctuation\">.</span>load_pem_private_key<span class=\"token punctuation\">(</span>\n\tprivate_key_pem<span class=\"token punctuation\">,</span>\n    password<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>\n\tbackend<span class=\"token operator\">=</span>default_backend<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"openssl-모듈을-이용한-인증서-검증\"><a href=\"#openssl-%EB%AA%A8%EB%93%88%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%9D%B8%EC%A6%9D%EC%84%9C-%EA%B2%80%EC%A6%9D\" aria-label=\"openssl 모듈을 이용한 인증서 검증 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>OpenSSL 모듈을 이용한 인증서 검증</h2>\n<hr>\n<p>OpenSSL 모듈을 이용하여 인증서와 개인키의 유효성 검증 및 체인 키와 인증서의 유효성 검증을 진행한다.</p>\n<ul>\n<li>\n<p>기본적인 모듈 호춢 및 인증서들에 대한 변수선언을 아래와 같이 해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> OpenSSL\n\ncertificate <span class=\"token operator\">=</span> <span class=\"token string\">\"인증서 내용\"</span>\nprivate_key <span class=\"token operator\">=</span> <span class=\"token string\">\"개인 키 내용\"</span>\nchain_auth_key <span class=\"token operator\">=</span> <span class=\"token string\">\"체인키 내용\"</span></code></pre></div>\n</li>\n<li>\n<p>인증서와 개인 키간의 검증 과정</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 개인키와 인증서를 OpenSSL의 객체로 생성</span>\npk_obj <span class=\"token operator\">=</span> OpenSSL<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>load_privatekey<span class=\"token punctuation\">(</span>crypto<span class=\"token punctuation\">.</span>FILETYPE_PEM<span class=\"token punctuation\">,</span> private_key<span class=\"token punctuation\">)</span>\ncert_obj <span class=\"token operator\">=</span> OpenSSL<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>load_certificate<span class=\"token punctuation\">(</span>crypto<span class=\"token punctuation\">.</span>FILETYPE_PEM<span class=\"token punctuation\">,</span> certificate<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Context 객체에 인증키와 개인키를 입력 한 후 check</span>\ncontext <span class=\"token operator\">=</span> OpenSSL<span class=\"token punctuation\">.</span>SSL<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">(</span>OpenSSL<span class=\"token punctuation\">.</span>SSL<span class=\"token punctuation\">.</span>TLSv1_METHOD<span class=\"token punctuation\">)</span>\ncontext<span class=\"token punctuation\">.</span>use_privatekey<span class=\"token punctuation\">(</span>pk_obj<span class=\"token punctuation\">)</span>\ncontext<span class=\"token punctuation\">.</span>use_certificate<span class=\"token punctuation\">(</span>cert_obj<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 인증서와 개인키가 서로 유효한 경우 error 발생하지 않음</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n\tcontext<span class=\"token punctuation\">.</span>check_privatekey<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> OpenSSL<span class=\"token punctuation\">.</span>SSL<span class=\"token punctuation\">.</span>Error <span class=\"token keyword\">as</span> err<span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"do not match\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n<p>일부 인증서의 경우 인증서를 발급받은 기관에 따라서 올바르지 않은 인증서라고 나오는 경우가 있는데, 이러한 문제를 해결하기 위해서 <code class=\"language-text\">체인 인증서</code>를 추가로 등록한다.\n아래의 경우는 그 <code class=\"language-text\">체인 인증서</code>가 올바른지 인증하기 위한 검토 logic 이다.\n해당 내용은 해당 <a href=\"https://stackoverflow.com/a/46554359/4443380\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">링크</a>를 참조하였다.</p>\n<ul>\n<li>\n<p>인증서와 Chain Key간의 검증</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> re\n\n<span class=\"token comment\"># Chain Key의 경우 여러개의 인증서 내용이 연달아 있으므로 인증서들의 유효성 및 List 형태로 분리을 위한 </span>\n<span class=\"token comment\"># regular expression을 이용하여 처리</span>\nPEM_RE <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">b'-----BEGIN CERTIFICATE-----\\r?.+?\\r?-----END CERTIFICATE-----\\r?\\n?'</span><span class=\"token punctuation\">,</span> re<span class=\"token punctuation\">.</span>DOTALL<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Chain Key에서 인증서내용들을 List 타입으로 분리</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">parse_chain</span><span class=\"token punctuation\">(</span>chain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> PEM_RE<span class=\"token punctuation\">.</span>finditer<span class=\"token punctuation\">(</span>chain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\nstore <span class=\"token operator\">=</span> OpenSSL<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>X509Store<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token comment\"># 분리한 key 값들을 store에 저장.</span>\n\t<span class=\"token comment\"># store에 인증서 등록시에 인증서의 방식(type, encode)이 잘못된 경우 error 발생</span>\n\t<span class=\"token keyword\">for</span> cr <span class=\"token keyword\">in</span> parse_chain<span class=\"token punctuation\">(</span>chain_auth_key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t  store<span class=\"token punctuation\">.</span>add_cert<span class=\"token punctuation\">(</span>OpenSSL<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>load_certificate<span class=\"token punctuation\">(</span>OpenSSL<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>FILETYPE_PEM<span class=\"token punctuation\">,</span> cr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> OpenSSL<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>Error <span class=\"token keyword\">as</span> err<span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Encode Type Error\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># store에 등록된 인증서들과 certificate를 비교하기 위한 context 객체 생성</span>\ncontext <span class=\"token operator\">=</span> OpenSSL<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>X509StoreContext<span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">,</span> cert_obj<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token comment\"># verify_certificate method를 이용하여 유효성 검증</span>\n\tcontext<span class=\"token punctuation\">.</span>verify_certificate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">except</span> OpenSSL<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>X509StoreContextError <span class=\"token keyword\">as</span> err<span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unable to get local issuer certificate\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"/posts/Python%EC%9C%BC%EB%A1%9C_SSL_%EC%9D%B8%EC%A6%9D%EC%84%9C_%EC%A0%95%EB%B3%B4%20%EC%B6%94%EC%B6%9C%20%EB%B0%8F%20%EA%B2%80%EC%A6%9D/#cryptography-%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%9D%B8%EC%A6%9D%EC%84%9C-%EC%A0%95%EB%B3%B4-%EC%B6%94%EC%B6%9C\">Cryptography 를 이용한 인증서 정보 추출</a></li>\n<li><a href=\"/posts/Python%EC%9C%BC%EB%A1%9C_SSL_%EC%9D%B8%EC%A6%9D%EC%84%9C_%EC%A0%95%EB%B3%B4%20%EC%B6%94%EC%B6%9C%20%EB%B0%8F%20%EA%B2%80%EC%A6%9D/#openssl-%EB%AA%A8%EB%93%88%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%9D%B8%EC%A6%9D%EC%84%9C-%EA%B2%80%EC%A6%9D\">OpenSSL 모듈을 이용한 인증서 검증</a></li>\n</ul>","fields":{"slug":"/posts/Python으로_SSL_인증서_정보 추출 및 검증/","tagSlugs":["/tag/ssl/","/tag/python-3/","/tag/cryptography/","/tag/open-ssl/"]},"frontmatter":{"date":"2019-11-12 17:12:20.505883","description":"Python의 cryptography와 OpenSSL 모듈을 이용하여 SSL 인증서의 정보 추출 및 활용.","tags":["SSL","python3","cryptography","OpenSSL"],"title":"Python으로 SSL 인증서 정보 추출 및 검증","socialImage":null},"headings":[{"value":"Cryptography 를 이용한 인증서 정보 추출","depth":2},{"value":"OpenSSL 모듈을 이용한 인증서 검증","depth":2}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/Python으로_SSL_인증서_정보 추출 및 검증/"}}}