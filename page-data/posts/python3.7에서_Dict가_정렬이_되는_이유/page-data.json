{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/python3.7에서_Dict가_정렬이_되는_이유/","result":{"data":{"markdownRemark":{"id":"7b59c675-38bc-5410-a05a-ad7b19afa3fa","html":"<p>python3.7 부터 dict에 데이터를 입력한 뒤 출력 해보면 항상 정렬을 유지한다. (cpython의 경우에는 3.6에서도 지원이 되었지만, 3.7부터는 정식으로 모두 지원이 되기에 3.7이라고 지칭한다.) 다만 여기서 말하는 정렬은 입력 순 정렬을 말하는 것으로, 실제 데이터의 정렬과는 다르다. 데이터 값의 정확한 정렬을 원한다면, <code class=\"language-text\">collection</code> 모듈의 <code class=\"language-text\">OrderDict</code> 를 사용해야 한다. (여기에 대해서도 StackOverflow에 동일한 답변이 있다.[<a href=\"https://stackoverflow.com/questions/39980323/are-dictionaries-ordered-in-python-3-6/39980744#39980744\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Link</a>])</p>\n<h3 id=\"python35와-python37의-비교\"><a href=\"#python35%EC%99%80-python37%EC%9D%98-%EB%B9%84%EA%B5%90\" aria-label=\"python35와 python37의 비교 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Python3.5와 Python3.7의 비교</h3>\n<blockquote>\n<p>3.6이 아닌 3.5와 비교하는 이유는 우리가 일반적으로 사용하는 python이 cpyton이다 보니 3.7과의 비교에서 차이가 없다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># version 3.5</span>\n_dict <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'f'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dict result >> {}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>_dict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Dict result >> {'c': None, 'f': None, 'b': None, 'a': None} </span>\n<span class=\"token operator\">/</span><span class=\"token operator\">*</span> 해당 결과값은 정렬이 되어있지도 않지만<span class=\"token punctuation\">,</span> 호출시마다 달라질 수 있다<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span><span class=\"token operator\">/</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># version 3.7</span>\n_dict <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'f'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n_dict<span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dict result >> {}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>_dict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># Dict result >> {'b': None, 'c': None, 'f': None, 'a': None} </span>\n<span class=\"token operator\">/</span><span class=\"token operator\">*</span> 결과를 보면 입력순으로 정렬이 되어서 나온다<span class=\"token punctuation\">.</span> <span class=\"token operator\">*</span><span class=\"token operator\">/</span></code></pre></div>\n<h3 id=\"python-37에서-dict가-정렬이-되는-이유\"><a href=\"#python-37%EC%97%90%EC%84%9C-dict%EA%B0%80-%EC%A0%95%EB%A0%AC%EC%9D%B4-%EB%90%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-label=\"python 37에서 dict가 정렬이 되는 이유 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Python 3.7에서 dict가 정렬이 되는 이유</h3>\n<p>그럼 갑자기 3.7 부터 왜 이러한 정렬을 지원하는지 찾아보니, python 웹페이지에 <code class=\"language-text\">Compact and ordered dict(issue27350)</code> [<a href=\"https://bugs.python.org/issue27350\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">링크</a>] 라는 제목으로 등록된 글을 확인할 수 있다. 해당 issue는 처음 2016.06.19에 처음 등록 되었고 현재는 종료된 issue다. </p>\n<p>여기서 처음 issue를 등록한 사람의 글을 보면 pypy 블로그에 등록된 <code class=\"language-text\">faster-more-memory-efficient-and-more</code>[<a href=\"https://morepypy.blogspot.jp/2015/01/faster-more-memory-efficient-and-more.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">링크</a>]라는 글을 언급하고 있는데 여기서 힌트를 얻어서 해당 아이디어를 낸 듯 하다. pypy에 언급된 내용에서는 pypy가 dict 정렬 등에 빠르고, 더 많은 메모리 효율의 성과를 낼 수 있었는지를 설명하는 내용이 있는데 이러한 작업이 시작하게 된 계기 또한 <code class=\"language-text\">Raymond Hettinger</code>가 제시한 아이디어[<a href=\"https://mail.python.org/pipermail/python-dev/2012-December/123028.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">링크</a>]에서 시작되었다.</p>\n<p><code class=\"language-text\">Raymond Hettinger</code>가 제시한 아이디어는 아래와 같이 기존에 배열 공간 하나로만 관리했던 dict 형태에 인덱스를 관리하는 공간을 하나 더 추가하는 형태로 제시한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">/</span><span class=\"token operator\">**</span> Raymond Hettinger 가 제시한 생각 <span class=\"token operator\">*</span><span class=\"token operator\">/</span>\n\n<span class=\"token comment\"># 입력된 Dict 값</span>\nd <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'timmy'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'barry'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'guido'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># 기존의 보관 방식</span>\nentries <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">'--'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'--'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'--'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">8522787127447073495</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'barry'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">[</span><span class=\"token string\">'--'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'--'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'--'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">[</span><span class=\"token string\">'--'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'--'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'--'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">[</span><span class=\"token string\">'--'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'--'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'--'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">9092791511155847987</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'timmy'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">[</span><span class=\"token string\">'--'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'--'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'--'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6480567542315338377</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'guido'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># 새로운 보관 방식</span>\nindices <span class=\"token operator\">=</span>  <span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\nentries <span class=\"token operator\">=</span>  <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">9092791511155847987</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'timmy'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">8522787127447073495</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'barry'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6480567542315338377</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'guido'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></code></pre></div>\n<blockquote>\n<p>위와 같은 형태로 변경된 블로그에서 설명하는 이전 dict의 구조와 새로운 dict의 구조</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Original Dict struct</span>\nstruct <span class=\"token builtin\">dict</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">long</span> num_items<span class=\"token punctuation\">;</span>\n    dict_entry<span class=\"token operator\">*</span> items<span class=\"token punctuation\">;</span>   <span class=\"token operator\">/</span><span class=\"token operator\">*</span> pointer to array <span class=\"token operator\">*</span><span class=\"token operator\">/</span>\n<span class=\"token punctuation\">}</span>\n\nstruct dict_entry <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">long</span> <span class=\"token builtin\">hash</span><span class=\"token punctuation\">;</span>\n    PyObject<span class=\"token operator\">*</span> key<span class=\"token punctuation\">;</span>\n    PyObject<span class=\"token operator\">*</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># New Dict struct</span>\nstruct <span class=\"token builtin\">dict</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">long</span> num_items<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\"># 기존에 하나로 존재하던것을 두개의 공간으로 나누었다.</span>\n    variable_int <span class=\"token operator\">*</span>sparse_array<span class=\"token punctuation\">;</span>\n    dict_entry<span class=\"token operator\">*</span> compact_array<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nstruct dict_entry <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">long</span> <span class=\"token builtin\">hash</span><span class=\"token punctuation\">;</span>\n    PyObject <span class=\"token operator\">*</span>key<span class=\"token punctuation\">;</span>\n    PyObject <span class=\"token operator\">*</span>value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>애초에 dict와 같은 Hash테이블은 속도 적인 부분에서 많은 장점이 있지만, 빠른 속도와 충돌을 방지하기 위해서 희소 배열 형태로 데이터를 보관하여야 했기에 많은 메모리 공간을 차지하고 있어야 했다. </p>\n<p>기존 3.5이전에는 dict 정보가 보관되는 dict<em>entry를 <code class=\"language-text\">PyDictKeyEntry 형태(메모리 주소, 키, 값)</code>의 희소 배열로 저장을 하면서 사용하지 않는 공간에 대해서도 PyDictKeyEntry 형태로 저장되어 불필요한 자원이 소모 되었다면, 3.7부터는 dict</em>entry에는 순수한 dict 정보만 보관하고, variable_int에 희소 배열 형태로 dict의 index를 저장하도록 변경 되면서 불필요하게 사용되던 메모리 공간을 효율적으로 관리할 수 있도록 수정된 것이다. 그와 함께 dict가 입력 순 정렬로 출력되는데에는 dict의 저장 공간이 list 형태로 변경 되면서 부수적인 효과가 나오게 된 것이다.</p>","tableOfContents":"<ul>\n<li><a href=\"/posts/python3.7%EC%97%90%EC%84%9C_Dict%EA%B0%80_%EC%A0%95%EB%A0%AC%EC%9D%B4_%EB%90%98%EB%8A%94_%EC%9D%B4%EC%9C%A0/#python35%EC%99%80-python37%EC%9D%98-%EB%B9%84%EA%B5%90\">Python3.5와 Python3.7의 비교</a></li>\n<li><a href=\"/posts/python3.7%EC%97%90%EC%84%9C_Dict%EA%B0%80_%EC%A0%95%EB%A0%AC%EC%9D%B4_%EB%90%98%EB%8A%94_%EC%9D%B4%EC%9C%A0/#python-37%EC%97%90%EC%84%9C-dict%EA%B0%80-%EC%A0%95%EB%A0%AC%EC%9D%B4-%EB%90%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\">Python 3.7에서 dict가 정렬이 되는 이유</a></li>\n</ul>","fields":{"slug":"/posts/python3.7에서_Dict가_정렬이_되는_이유/","tagSlugs":["/tag/python/","/tag/dict/","/tag/python-3-7/","/tag/dict-정렬/"]},"frontmatter":{"date":"2020-02-09 14:02:19.611501","description":"python3.7 부터 dict에 데이터를 입력한 뒤 출력 해보면 항상 정렬을 유지한다. (cpython의 경우에는 3.6에서도 지원이 되었지만, 3.7부터는 정식으로 모두 지원이 되기에 3.7이라고 지칭한다.) python 3.7부터는 어떻게 dict가 입력 순 정렬을 유지하는가?","tags":["python","dict","python3.7","dict 정렬"],"title":"python3.7에서 Dict가 정렬이 되는 이유","socialImage":null},"headings":[{"value":"Python3.5와 Python3.7의 비교","depth":3},{"value":"Python 3.7에서 dict가 정렬이 되는 이유","depth":3}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/python3.7에서_Dict가_정렬이_되는_이유/"}}}