{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/DRF(Django-Rest-Framework)를_이용한_pagination/search_기능_구현/","result":{"data":{"markdownRemark":{"id":"e26d6dc1-6dda-5028-9ecc-9ead9b260770","html":"<blockquote>\n<p>django-rest-framework를 이용하여 pagination/Search 기능을 구현하는 법을 설명., 모듈의 설치와 관련한 사항은 여기서 언급하지 않는다.</p>\n<p>설명을 위한 drf의 버전은 3.2.5 이며, pagination 기능이 drf 3.1 이상부터 추가되었으므로 그 이상읠 버전을 사용해야 한다.</p>\n</blockquote>\n<h2 id=\"pagination-구현\"><a href=\"#pagination-%EA%B5%AC%ED%98%84\" aria-label=\"pagination 구현 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pagination 구현</h2>\n<blockquote>\n<p>pagination은 일반적으로 많이 보이는 List 형태의 View에서 많이 사용된다.  <code class=\"language-text\">이전페이지</code>,<code class=\"language-text\">다음페이지</code> 등과 같은 기능을 구현 하는데 직접 구현도 가능하지만 drf의 pagination 기능을 사용하면 손쉽게 처리가 가능하다.</p>\n<p>보통 RestAPI <code class=\"language-text\">query-param</code>에 <code class=\"language-text\">?page_size=1</code> 과 같은 형태로 넘겨진다. </p>\n</blockquote>\n<p>drf의 pagination 구현은 <code class=\"language-text\">django</code>의 <code class=\"language-text\">settings.py</code> 파일을 수정하는 방식과 별도의 class를 만들어서 구현하는 방식이 있다. <code class=\"language-text\">settings</code>를 수정하면 기존의 다른 class 들에 별다른 작업없이 pagination읠 기능 구현 가능 및 해당 drf를 사용중인 RestAPI 전체에 pagination 기능을 구현 할 수 있다.</p>\n<ul>\n<li>\n<p>settings.py 를 이용한 pagination 적용</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">REST_FRAMEWORK <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'DEFAULT_PAGINATION_CLASS'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'rest_framework.pagination.LimitOffsetPagination'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'PAGE_SIZE'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<p>전체 API가 아닌 원하는 Class에만 pagination 기능을 구축하려 한다면 아래와 같이 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># ./api/v1/paginations.py</span>\n<span class=\"token triple-quoted-string string\">'''\n별도의 모듈로 분리하지 않아도 된다.\n'''</span> \n\n<span class=\"token keyword\">from</span> rest_framework<span class=\"token punctuation\">.</span>pagination <span class=\"token keyword\">import</span> PageNumberPagination\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">StandardResultsSetPagination</span><span class=\"token punctuation\">(</span>PageNumberPagination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># page_size를 None으로 할경우 param에서 page_size를 넘기지 않으면 전체 데이터를 가져온다.</span>\n    page_size <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n    page_size_query_param <span class=\"token operator\">=</span> <span class=\"token string\">'pagesize'</span> <span class=\"token comment\"># 자기가 원하는 param</span>\n    max_page_size <span class=\"token operator\">=</span> <span class=\"token number\">1000</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">NotStandardResultsSetPagination</span><span class=\"token punctuation\">(</span>PageNumberPagination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    page_size <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n    page_size_query_param <span class=\"token operator\">=</span> <span class=\"token string\">'page'</span>\n    max_page_size <span class=\"token operator\">=</span> <span class=\"token number\">1000</span></code></pre></div>\n<blockquote>\n<p>위와 같이 pagination 스타일을 분리하여 필요에 맞는 스타일을 가져와서 활용이 가능하다.</p>\n</blockquote>\n<ul>\n<li>특정 api class 에만 pagination 구현</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># ./api/v1/views.py</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">from</span> rest_framework <span class=\"token keyword\">import</span> viewsets\n<span class=\"token keyword\">from</span> paginations <span class=\"token keyword\">import</span> StandardResultsSetPagination<span class=\"token punctuation\">,</span> NotStandardResultsSetPagination\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">StandardViewSet</span><span class=\"token punctuation\">(</span>viewsets<span class=\"token punctuation\">.</span>ModelViewSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  pagination_class <span class=\"token operator\">=</span> StandardResultsSetPagination\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">NotStandardViewSet</span><span class=\"token punctuation\">(</span>viewsets<span class=\"token punctuation\">.</span>ModelViewSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  pagination_class <span class=\"token operator\">=</span> NotStandardResultsSetPagination\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>위와 같은 형태로 각 API class 별로 원하는 pagination 스타일을 구현 할 수 있다.</p>\n<ul>\n<li>\n<p>전체 api class에 pagination 구현</p>\n<p>전체 API에 구현하기 위해서는 앞서 나온 내용처럼 <code class=\"language-text\">settings.py</code>를 수정하여야 하며 <code class=\"language-text\">paginations.py</code> 스타일을 가져와 사용하기 위해서는 아래와 같이 한다.</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># settings.py</span>\nREST_FRAMEWORK <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'DEFAULT_PAGINATION_CLASS'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'api.v1.paginations.StandardResultsSetPagination'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 처럼 코드를 작성하면 별다른 작업없이 pagination 기능의 구현이 가능하다.</p>\n<p>추가로 무한 스크롤과 같은 형태의 구현을 원한다면 <code class=\"language-text\">CursorPagination</code> 모듈을 이용하여 아래와 같은 구현이 가능하다. 방식은 앞서 나온 pagination 방식과 동일 하며  <code class=\"language-text\">PageNumberPagination</code>모듈을  <code class=\"language-text\">CursorPagination</code>모듈로 변경하면 된다. cursor는 page 방식처럼 어느 위치의 데이터인지 사용자 입장에서 알지 못하게 하거나 알 필요가 없을때 유용하다. cursor 방식과 page 방식의 차이는 데이터를 가져오는 기준의 값이 page가 아닌 cursor(id) 방식이라 것에 차이가 있다. 또한 cursor는 <code class=\"language-text\">page_size_query_param</code>가 아닌 <code class=\"language-text\">cursor_query_param</code>을 속성 값으로 가진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># CursorPagenagtion</span>\n\n<span class=\"token keyword\">from</span> rest_framework<span class=\"token punctuation\">.</span>pagenation <span class=\"token keyword\">import</span> CursorPagination\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">StandardCursorPagination</span><span class=\"token punctuation\">(</span>CursorPagination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    page_size <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n    <span class=\"token comment\"># page의 cursor를 구분하기 위해선 model의 unique한 field를 필요로 한다.</span>\n    cursor_query_param <span class=\"token operator\">=</span> <span class=\"token string\">'id'</span>\n    <span class=\"token comment\"># 정렬 순서를 특정 필드를 선택하여 정할 수 있다.</span>\n    ordering <span class=\"token operator\">=</span> <span class=\"token string\">'-log_date'</span></code></pre></div>","fields":{"slug":"/posts/DRF(Django-Rest-Framework)를_이용한_pagination/search_기능_구현/","tagSlugs":["/tag/python/","/tag/django/","/tag/django-rest-framework/"]},"frontmatter":{"date":"2019-11-11 19:30:33.046034","description":"django-rest-framework를 이용하여 pagination/Search 기능을 구현하는 법을 설명.","tags":["Python","Django","Django-Rest-Framework"],"title":"DRF(Django-Rest-Framework)를 이용한 pagination/search 기능 구현","socialImage":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/DRF(Django-Rest-Framework)를_이용한_pagination/search_기능_구현/"}}}