{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/drf-testcase-인증방법/","result":{"data":{"markdownRemark":{"id":"6c5446f7-41fc-501c-a571-0f837453f310","html":"<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<blockquote>\n<p>여기서는 Django의 User class를 상속하지 않은 상황에서의 Django-Rest-Framework API에 대한 인증 Test에 대해서 다룹니다.</p>\n</blockquote>\n<p>Django를 이용한 프로젝트에서 API 서비스에 대하여 Test를 진행하려 할때 인증과 관련한 부분이 걸립니다. Unit-Test에서 별도의 인증키를 받는 로직을 구현해서 Test 하여도 되지만 여기서는 다르게 진행합니다.</p>\n<h2 id=\"인증방법\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%A6%9D%EB%B0%A9%EB%B2%95\" aria-label=\"인증방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인증방법</h2>\n<p>일반적으로 Django의 User Class를 상속받아서 진행을 하였다면 인증에 큰 문제는 없습니다. DRF(Django-Rest-framework)를 이용하여 개발한 경우 <code>APIClient</code> 를 이용하면 되죠.\n아래와 같은 방식으로 인증절차를 통과할 수 있습니다.</p>\n<pre class=\"grvsc-container monokai\" data-language=\"python\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># 일반적인 User class를 상속한 경우</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">from</span><span class=\"mtk1\"> rest_framework.test </span><span class=\"mtk7\">import</span><span class=\"mtk1\"> APIClient</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">client </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> APIClient()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">client.login(</span><span class=\"mtk10 mtki\">username</span><span class=\"mtk7\">=</span><span class=\"mtk6\">&#39;user, password=&#39;</span><span class=\"mtk7\">pass</span><span class=\"mtk6\">&#39;)</span></span></span></code></pre>\n<p>다만, Django의 User class를 상속 받지 않은 경우는 <code>force_authenticate</code> method를 이용하여 처리 할 수 있습니다.</p>\n<pre class=\"grvsc-container monokai\" data-language=\"python\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># 강제로 인증을 위한 </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">client.force_authenticate(</span><span class=\"mtk10 mtki\">user</span><span class=\"mtk7\">=</span><span class=\"mtk6\">&#39;user&#39;</span><span class=\"mtk1\">)</span></span></span></code></pre>\n<p>위와 같은 방식을 통해서 강제로 인증절차를 수행할 수 있습니다. 위의 방식으로 인증이 진행되었으면 해당 client 객체를 이용하여, <code>get, post, put, delete</code> 등의 API 호출의 진행이 가능하므로 인증 절차 후의 TestCase를 수행 가능합니다.</p>\n<h2 id=\"추가사항\" style=\"position:relative;\"><a href=\"#%EC%B6%94%EA%B0%80%EC%82%AC%ED%95%AD\" aria-label=\"추가사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>추가사항</h2>\n<p>제가 Test를 진행하던 프로젝트는 기존에 만들어진 프로젝트에 TestCase를 추가하던 상황이었는데 Django 버전이 1.6 이었습니다. Test를 위한 method를 1개만 놓을때는 문제 없었던 부분이 2개 이상을 선언하고 진행하는 경우 <code>AttributeError: 'IntegrityError' object has no attribute '__traceback__'</code>라는 에러 메시지가 나올 수 있는데 해당 상황의 경우가 Test 당시 <code>setUp</code>에서 model object를 생성해주는 작업을 진행하였다면 <code>tearDown</code> 시점에서 해당 model 객체를 제거해 주는 작업을 같이 진행해 줘야 합니다.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .monokai {\n    background-color: #272822;\n    color: #f8f8f2;\n  }\n  .monokai .mtki { font-style: italic; }\n  .monokai .mtk3 { color: #75715E; }\n  .monokai .mtk7 { color: #F92672; }\n  .monokai .mtk1 { color: #F8F8F2; }\n  .monokai .mtk10 { color: #FD971F; }\n  .monokai .mtk6 { color: #E6DB74; }\n  .monokai .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","tableOfContents":"<ul>\n<li><a href=\"/posts/drf-testcase-%EC%9D%B8%EC%A6%9D%EB%B0%A9%EB%B2%95/#intro\">Intro</a></li>\n<li><a href=\"/posts/drf-testcase-%EC%9D%B8%EC%A6%9D%EB%B0%A9%EB%B2%95/#%EC%9D%B8%EC%A6%9D%EB%B0%A9%EB%B2%95\">인증방법</a></li>\n<li><a href=\"/posts/drf-testcase-%EC%9D%B8%EC%A6%9D%EB%B0%A9%EB%B2%95/#%EC%B6%94%EA%B0%80%EC%82%AC%ED%95%AD\">추가사항</a></li>\n</ul>","fields":{"slug":"/posts/drf-testcase-인증방법/","tagSlugs":["/tag/python/","/tag/django/","/tag/rest-framework/","/tag/drf/"]},"frontmatter":{"date":"2019-12-26 18:40:00.704249","description":"Django-Rest-framework를 이용한 API의 TestCase작성시 사용자 인증에 대한 선행작업의 내용입니다.","tags":["python","django","RestFramework","drf"],"title":"Django Rest-framework API에 TestCase작업시 인증방법","socialImage":null},"headings":[{"value":"Intro","depth":2},{"value":"인증방법","depth":2},{"value":"추가사항","depth":2}]}},"pageContext":{"slug":"/posts/drf-testcase-인증방법/"}}}