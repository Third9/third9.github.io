{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/drf-testcase-인증방법/","result":{"data":{"markdownRemark":{"id":"970f3d40-0050-56d8-91d8-26bc588cf255","html":"<h2 id=\"intro\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<blockquote>\n<p>여기서는 Django의 User class를 상속하지 않은 상황에서의 Django-Rest-Framework API에 대한 인증 Test에 대해서 다룹니다.</p>\n</blockquote>\n<p>Django를 이용한 프로젝트에서 API 서비스에 대하여 Test를 진행하려 할때 인증과 관련한 부분이 걸립니다. Unit-Test에서 별도의 인증키를 받는 로직을 구현해서 Test 하여도 되지만 여기서는 다르게 진행합니다.</p>\n<h2 id=\"인증방법\"><a href=\"#%EC%9D%B8%EC%A6%9D%EB%B0%A9%EB%B2%95\" aria-label=\"인증방법 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인증방법</h2>\n<p>일반적으로 Django의 User Class를 상속받아서 진행을 하였다면 인증에 큰 문제는 없습니다. DRF(Django-Rest-framework)를 이용하여 개발한 경우 <code class=\"language-text\">APIClient</code> 를 이용하면 되죠.\n아래와 같은 방식으로 인증절차를 통과할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 일반적인 User class를 상속한 경우</span>\n<span class=\"token keyword\">from</span> rest_framework<span class=\"token punctuation\">.</span>test <span class=\"token keyword\">import</span> APIClient\n\nclient <span class=\"token operator\">=</span> APIClient<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nclient<span class=\"token punctuation\">.</span>login<span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span><span class=\"token string\">'user, password='</span><span class=\"token keyword\">pass</span>'<span class=\"token punctuation\">)</span></code></pre></div>\n<p>다만, Django의 User class를 상속 받지 않은 경우는 <code class=\"language-text\">force_authenticate</code> method를 이용하여 처리 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 강제로 인증을 위한 </span>\nclient<span class=\"token punctuation\">.</span>force_authenticate<span class=\"token punctuation\">(</span>user<span class=\"token operator\">=</span><span class=\"token string\">'user'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위와 같은 방식을 통해서 강제로 인증절차를 수행할 수 있습니다. 위의 방식으로 인증이 진행되었으면 해당 client 객체를 이용하여, <code class=\"language-text\">get, post, put, delete</code> 등의 API 호출의 진행이 가능하므로 인증 절차 후의 TestCase를 수행 가능합니다.</p>\n<h2 id=\"추가사항\"><a href=\"#%EC%B6%94%EA%B0%80%EC%82%AC%ED%95%AD\" aria-label=\"추가사항 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>추가사항</h2>\n<p>제가 Test를 진행하던 프로젝트는 기존에 만들어진 프로젝트에 TestCase를 추가하던 상황이었는데 Django 버전이 1.6 이었습니다. Test를 위한 method를 1개만 놓을때는 문제 없었던 부분이 2개 이상을 선언하고 진행하는 경우 <code class=\"language-text\">AttributeError: &#39;IntegrityError&#39; object has no attribute &#39;__traceback__&#39;</code>라는 에러 메시지가 나올 수 있는데 해당 상황의 경우가 Test 당시 <code class=\"language-text\">setUp</code>에서 model object를 생성해주는 작업을 진행하였다면 <code class=\"language-text\">tearDown</code> 시점에서 해당 model 객체를 제거해 주는 작업을 같이 진행해 줘야 합니다.</p>","tableOfContents":"<ul>\n<li><a href=\"/posts/drf-testcase-%EC%9D%B8%EC%A6%9D%EB%B0%A9%EB%B2%95/#intro\">Intro</a></li>\n<li><a href=\"/posts/drf-testcase-%EC%9D%B8%EC%A6%9D%EB%B0%A9%EB%B2%95/#%EC%9D%B8%EC%A6%9D%EB%B0%A9%EB%B2%95\">인증방법</a></li>\n<li><a href=\"/posts/drf-testcase-%EC%9D%B8%EC%A6%9D%EB%B0%A9%EB%B2%95/#%EC%B6%94%EA%B0%80%EC%82%AC%ED%95%AD\">추가사항</a></li>\n</ul>","fields":{"slug":"/posts/drf-testcase-인증방법/","tagSlugs":["/tag/python/","/tag/django/","/tag/rest-framework/","/tag/drf/"]},"frontmatter":{"date":"2019-12-26 18:40:00.704249","description":"Django-Rest-framework를 이용한 API의 TestCase작성시 사용자 인증에 대한 선행작업의 내용입니다.","tags":["python","django","RestFramework","drf"],"title":"Django Rest-framework API에 TestCase작업시 인증방법","socialImage":null},"headings":[{"value":"Intro","depth":2},{"value":"인증방법","depth":2},{"value":"추가사항","depth":2}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/drf-testcase-인증방법/"}}}