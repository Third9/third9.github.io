{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/multi-proxy_of_react/","result":{"data":{"markdownRemark":{"id":"27a71845-7a13-505c-99df-2f314c22ee34","html":"<blockquote>\n<p>🚨아래에서 설명할 proxy customize를 원활히 수행하기 위해서는 CRA(v2)가 필수이다. react 프로젝트 생성시에 CRA(v2)를 이용하지 않았을 경우 원활한 수행이 안될 수 있다.</p>\n</blockquote>\n<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<p>React를 이용한 프로젝트를 진행하면서 겪었던 삽질들을 하나하나 정리중이다. 그 중에서 React를 이용하여 외부의 API 를 호출할때 cors 이슈가 발생하였는데, 해당 이슈는 server 에서 response 되는 내용의 header에 <code class=\"language-text\">&#39;Access-Control-Allow-Origin&#39;: &#39;*&#39;</code> 를 넣어주면 해결이 되는 것으로 알고 있지만 server를 수정할 수 있는 권한이 없는 경우에는 reactjs 의 <code class=\"language-text\">package.json</code> 에 <code class=\"language-text\">proxy</code> 설정을 해주면 된다.</p>\n<blockquote>\n<p>💡Proxy와 관련한 설정은 수정한 경우, react test 서버를 재시작해줘야 한다. js 코드가 변경되었을때 자동을 hot-load 되는 형식으로는 proxy설정이 반영되지 않는다.</p>\n</blockquote>\n<h2 id=\"package를-이용한-기본-proxy-설정\" style=\"position:relative;\"><a href=\"#package%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EA%B8%B0%EB%B3%B8-proxy-%EC%84%A4%EC%A0%95\" aria-label=\"package를 이용한 기본 proxy 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>#Package를 이용한 기본 proxy 설정</h2>\n<p>reactjs를 셋팅하면 기본적으로 설정되는 <code class=\"language-text\">package.json</code> 파일에 아래와 같이 선언을 해주면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// package.json</span>\n\n...\n<span class=\"token property\">\"proxy\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://local.test.com\"</span></code></pre></div>\n<p>아래는 proxy test를 위해서 임의로 작성한 코드이며, http 통신은 axios를 이용하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// apiConnectTest.js</span>\n<span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// HTTP GET</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">async</span> <span class=\"token function-variable function\">getReq</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span>\t<span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/local/req'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\t  \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// HTTP POST</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">async</span> <span class=\"token function-variable function\">postReq</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span>\t<span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/remote/req'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>id<span class=\"token operator\">:</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\t  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같은 코드를 선언하고, <code class=\"language-text\">getReq</code> , <code class=\"language-text\">postReq</code> function을 호출하게 된다면 두 요청 모두 우리가 위에서 설정한 proxy 경로를 타고 호출된다. </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">getReq ⇒ http://local.test.com/local/req\npostReq ⇒ http://local.test.com/remote/req</code></pre></div>\n<p>다만, 서비스 종류에 따라서 한곳이 아닌 복수의 경로로 호출을 해야할 수 있다. 그러한 경우에는 <code class=\"language-text\">http-proxy-middleware</code> 를 이용한다.</p>\n<h2 id=\"http-proxy-middleware를-이용한-multi-proxy-처리\" style=\"position:relative;\"><a href=\"#http-proxy-middleware%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-multi-proxy-%EC%B2%98%EB%A6%AC\" aria-label=\"http proxy middleware를 이용한 multi proxy 처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>#http-proxy-middleware를 이용한 Multi-proxy 처리</h2>\n<p>multiproxy 기능을 사용하기 위해서는 우선 <code class=\"language-text\">http-proxy-middleware</code>를 설치하여야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">yarn</span> <span class=\"token function\">add</span> http-proxy-middleware</code></pre></div>\n<p>기본 src 폴더 하위에 <code class=\"language-text\">setupProxy.js</code> 파일을 아래와 같은 형태로 작성한다. 맨 위에서도 설명하였지만, setupProxy를 통한 proxy customize는 해당 프로젝트를 CRA(v2)를 이용하여 생성하였어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// setupProxy.js</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> createProxyMiddleware <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http-proxy-middleware'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">app</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// auth 포함 하위 route에 대해서는 localhost:5000/v1을 domain으로 하여 proxy설정</span>\n  app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>\n\t\t<span class=\"token string\">'/local'</span><span class=\"token punctuation\">,</span> \n\t\t<span class=\"token function\">createProxyMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> \n\t\t\ttarget<span class=\"token operator\">:</span> <span class=\"token string\">'http://local.test.com'</span><span class=\"token punctuation\">,</span>\n\t\t\tchangeOrigin<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// dummy 포함 하위 route에 대해서는 localhost:6000/v1을 domain으로 하여 proxy설정</span>\n  app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>\n\t\t<span class=\"token string\">'/remote'</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token function\">createProxyMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\t\t\ttarget<span class=\"token operator\">:</span> <span class=\"token string\">'http://remote.test.com'</span><span class=\"token punctuation\">,</span>\n\t\t\tchangeOrigin<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 작성한 경우 route 설정에 따라서 동작하며, 위에서 사용했던 <code class=\"language-text\">apiConnectTest.js</code> 코드를 예로 든다면 아래와 같이 동작한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">getReq ⇒ http://local.test.com/local/req\npostReq ⇒ http://remote.test.com/remote/req</code></pre></div>\n<p>여기서는 언급하지 않았지만  <code class=\"language-text\">http-proxy-middleware</code> 모듈을 이용하면 pathRewrite 옵션을 통해서 새로운 api로의 rewrite 기능도 사용이 가능하다.</p>","tableOfContents":"<ul>\n<li><a href=\"/posts/multi-proxy_of_react/#intro\">Intro</a></li>\n<li><a href=\"/posts/multi-proxy_of_react/#package%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EA%B8%B0%EB%B3%B8-proxy-%EC%84%A4%EC%A0%95\">#Package를 이용한 기본 proxy 설정</a></li>\n<li><a href=\"/posts/multi-proxy_of_react/#http-proxy-middleware%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-multi-proxy-%EC%B2%98%EB%A6%AC\">#http-proxy-middleware를 이용한 Multi-proxy 처리</a></li>\n</ul>","fields":{"slug":"/posts/multi-proxy_of_react/","tagSlugs":["/tag/react-js/","/tag/proxy/","/tag/http-proxy-middleware/"]},"frontmatter":{"date":"2020-06-21 16:53:12","description":"React환경에서 multi-proxy사용하기","tags":["React.js","proxy","http-proxy-middleware"],"title":"React환경의 Multi-Proxy 구현","socialImage":null},"headings":[{"value":"Intro","depth":2},{"value":"#Package를 이용한 기본 proxy 설정","depth":2},{"value":"#http-proxy-middleware를 이용한 Multi-proxy 처리","depth":2}]}},"pageContext":{"slug":"/posts/multi-proxy_of_react/"}}}