{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/docker를_이용한_Sentry_20_설치_upgrade/","result":{"data":{"markdownRemark":{"id":"c3ec65d5-dd97-5825-b6f5-87bd71a51f03","html":"<h1 id=\"sentry-2080-설치와-upgrade\" style=\"position:relative;\"><a href=\"#sentry-2080-%EC%84%A4%EC%B9%98%EC%99%80-upgrade\" aria-label=\"sentry 2080 설치와 upgrade permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sentry 20.8.0 설치와 Upgrade</h1>\n<p>이전에 sentry에 대해서 다루었지만, 한동안 안본 사이에 버전이 20.8.0으로 upgrade 되었다.\n그와 함께 docker-compose를 이용하여 설치하도록 변경되어으며, 좀더 대용량 데이터 처리에 적합하게 다양한 서비스들이 추가되었다.</p>\n<blockquote>\n<p>설치 환경</p>\n</blockquote>\n<ul>\n<li>Ubuntu: 16.04</li>\n<li>python: 2.7.17</li>\n<li>Sentry: 20.8.0</li>\n<li>postgreSQL: 9.6</li>\n</ul>\n<blockquote>\n<p>9.1.2 버전 이후부터 sentry는 docker를 이용한 설치를 지원 및 권장하고 있다.\n직접 일일이 설치하여 셋팅도 가능하지만, 10 버전부터 sentry에서 자체적으로 지원하는 검색/필터링 서비스인 snuba가 포함되었고, 직접 셋팅하기에는 설치할 것도 많고, 복잡도도 늘어나서 docker-compose를 이용하여 설치하는 것이 건강에 좋다.</p>\n</blockquote>\n<h2 id=\"docker와-docker-compose의-설치\" style=\"position:relative;\"><a href=\"#docker%EC%99%80-docker-compose%EC%9D%98-%EC%84%A4%EC%B9%98\" aria-label=\"docker와 docker compose의 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>docker와 docker-compose의 설치</h2>\n<blockquote>\n<p>여기서는 docker 설치와 관련해서 최소한의 설명만을 이야기하고, docker의 설치방법과 관련해서 자세한 내용은 링크를 참조 바란다. <a href=\"https://docs.docker.com/engine/install/ubuntu/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">docker 설치</a>, <a href=\"https://docs.docker.com/compose/install/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">docker-compose 설치</a>를 참조 바란다.</p>\n</blockquote>\n<blockquote>\n<p>docker와 docker-compose는 별개이다. 각각 따로 설치를 해줘야 한다.</p>\n</blockquote>\n<h2 id=\"git에서-sentry-내려받아-설치하기\" style=\"position:relative;\"><a href=\"#git%EC%97%90%EC%84%9C-sentry-%EB%82%B4%EB%A0%A4%EB%B0%9B%EC%95%84-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0\" aria-label=\"git에서 sentry 내려받아 설치하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>git에서 sentry 내려받아 설치하기</h2>\n<p>설치를 위한 <code>install.sh</code> 스크립트와 docker-compose 파일들을 git 명령어를 이용해서 가져온다.</p>\n<pre class=\"grvsc-container monokai\" data-language=\"ps\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># sentry pull로 가져오기</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$ git clone https:</span><span class=\"mtk7\">//</span><span class=\"mtk9\">github.com</span><span class=\"mtk7\">/</span><span class=\"mtk1\">getsentry</span><span class=\"mtk7\">/</span><span class=\"mtk1\">onpremise.git .</span><span class=\"mtk7\">/</span><span class=\"mtk1\">sentry</span></span></span></code></pre>\n<p>위의 작업이 완료된 후 아래의 명령을 실행한다.</p>\n<pre class=\"grvsc-container monokai\" data-language=\"ps\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># sentry path로 이동 후 설치 스크립트 실행</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">cd .</span><span class=\"mtk7\">/</span><span class=\"mtk1\">sentry</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">sudo .</span><span class=\"mtk7\">/</span><span class=\"mtk1\">install.sh</span></span></span></code></pre>\n<p>설치까지 완료되었으면, docker-compose cli를 이용하여 실행 시켜주면 된다.</p>\n<pre class=\"grvsc-container monokai\" data-language=\"ps\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Sentry 서비스들 실행</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$sudo docker</span><span class=\"mtk7\">-</span><span class=\"mtk1\">compose up </span><span class=\"mtk7\">-</span><span class=\"mtk1\">d</span></span></span></code></pre>\n<p>끝이다. 이전 글에서 sentry 설치와 설정했던 부분들에 비하면 할일이 없다.\n실행중인 container를 확인하거나, 종료시키고자 할때는 아래와 같은 명령어를 사용하면 된다.</p>\n<pre class=\"grvsc-container monokai\" data-language=\"ps\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># 실행중인 container들 출력</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$sudo docker</span><span class=\"mtk7\">-</span><span class=\"mtk1\">compose ps</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># 서비스 종료</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$sudo docker</span><span class=\"mtk7\">-</span><span class=\"mtk1\">compose down</span></span></span></code></pre>\n<h2 id=\"sentry-최신버전으로-upgrade\" style=\"position:relative;\"><a href=\"#sentry-%EC%B5%9C%EC%8B%A0%EB%B2%84%EC%A0%84%EC%9C%BC%EB%A1%9C-upgrade\" aria-label=\"sentry 최신버전으로 upgrade permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sentry 최신버전으로 Upgrade</h2>\n<blockquote>\n<p>일반 환경의 9.1.2 버전에서 docker환경의 20.8.0으로 upgrade 한다.</p>\n</blockquote>\n<p>여기서부터는 이전 글에서 설치한 일반 환경에서의 sentry 9.1.2 를 docker 환경의 20.8.0로 올리는 내용을 다룬다.\n우선 위의 글 내용중에서 git을 이용하여 sentry repo를 clone하는 작업까지만 수행한 뒤에 다음 작업을 진행한다.</p>\n<h3 id=\"docker-compose-수정\" style=\"position:relative;\"><a href=\"#docker-compose-%EC%88%98%EC%A0%95\" aria-label=\"docker compose 수정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>#docker-compose 수정</h3>\n<p>기존 설치와 다른점은 docker-compose의 설정을 수정해줘야 한다는 것이다. <code>docker-compose.yml</code>파일을 열어서 <code>services</code> 아래의 <code>postgres</code> 항목을 보면 <code>volumes:</code> 아래에 해당 db 데이터가 보관될 경로가 있다. 내용을 아래와 같이 바꿔준다.</p>\n<pre class=\"grvsc-container monokai\" data-language=\"yml\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># before</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">- </span><span class=\"mtk6\">&quot;postgres:/var/lib/postgresql/data&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># after</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">- </span><span class=\"mtk6\">&quot;/mnt/postgresql/data:/var/lib/postgresql/data&quot;</span></span></span></code></pre>\n<h3 id=\"postgre-sql-upgrade\" style=\"position:relative;\"><a href=\"#postgre-sql-upgrade\" aria-label=\"postgre sql upgrade permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>#postgre-SQL upgrade</h3>\n<blockquote>\n<p>postgresql 9.4 to 9.6</p>\n</blockquote>\n<p>위의 <code>docker-compose.yml</code> 파일을 열었을때 postgresql의 버전을 같이 확인하자,\n보통 sentry가 9.1.2 버전이하라면 postgresql의 버전은 9.4일것이고, sentry의 최신버전인 20.8.0라면 postgresql의 버전은 9.6일 것이다.(나중에 버전up이 되면서 달라질 수 있다)</p>\n<p>기존 sentry에서 사용되던 postgresql의 버전과 upgrade하려는 sentry가 사용하는 postgresql의 버전을 일치시켜주는 작업이 필요하다.\n여기선 9.4 to 9.6 이다, 데이터 용량이 크면 시간이 오래걸린다.</p>\n<p>버전업과 관련해서는 내용이 긴 관계로 여기서 다루진 않고 관련문서의 링크를 공유한다.\n<a href=\"https://gist.github.com/dmitrykustov/27c673ec4f7abd716912e4c830910019\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">upgrade-postgres-9.4-to-9.6.md</a></p>\n<h3 id=\"install-스크립트를-이용한-설치\" style=\"position:relative;\"><a href=\"#install-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%84%A4%EC%B9%98\" aria-label=\"install 스크립트를 이용한 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>#install 스크립트를 이용한 설치</h3>\n<p>위의 작업까지 진행하였다면, 우선 <code>install.sh</code>스크립트를 이용하여 sentry를 설치해준다.</p>\n<pre class=\"grvsc-container monokai\" data-language=\"ps\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$ sudo .</span><span class=\"mtk7\">/</span><span class=\"mtk1\">install.sh</span></span></span></code></pre>\n<h3 id=\"새로운-docker-환경의-sentry-db-전달\" style=\"position:relative;\"><a href=\"#%EC%83%88%EB%A1%9C%EC%9A%B4-docker-%ED%99%98%EA%B2%BD%EC%9D%98-sentry-db-%EC%A0%84%EB%8B%AC\" aria-label=\"새로운 docker 환경의 sentry db 전달 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>#새로운 docker 환경의 sentry db 전달</h3>\n<p>위에서 postgreSQL 컨테이너의 db 데이터 폴더를 <code>mnt/postgresql/data</code>와 연결하였으므로 해당 경로로 이동하면 데이터 파일들을 볼 수 있다. 해당 폴더에 기존 sentry에서 사용하던 db의 데이터를 전부 복사한다.</p>\n<pre class=\"grvsc-container monokai\" data-language=\"ps\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># 일반적인 DB의 경로는 아래와 같다</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$ </span><span class=\"mtk7\">/var/</span><span class=\"mtk1\">lib</span><span class=\"mtk7\">/</span><span class=\"mtk1\">postgresql</span><span class=\"mtk7\">/</span><span class=\"mtk4\">9.6</span><span class=\"mtk7\">/</span><span class=\"mtk1\">main;</span></span></span></code></pre>\n<p>위의 9.4는 postgreSQL의 버전이므로 버전에 따라 변경 될 수 있다. 복사할때 data의 크기에 따라서 시간이 정비례하여 증가한다.</p>\n<p>복사가 완료되었으면 복사된 경로로 가보자 <code>/mnt/postgresql/data</code> 해당 경로에 가서 user 권한을 확인하면, <code>root</code> 로 설정이 되어있을거다. docker에서 접근이 가능하도록 권한을 변경해준다.</p>\n<pre class=\"grvsc-container monokai\" data-language=\"ps\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># su 모드</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">chown </span><span class=\"mtk7\">-</span><span class=\"mtk1\">R </span><span class=\"mtk4\">999</span><span class=\"mtk1\">:docker .</span><span class=\"mtk7\">/*</span></span></span></code></pre>\n<h3 id=\"sentry-설정파일-수정\" style=\"position:relative;\"><a href=\"#sentry-%EC%84%A4%EC%A0%95%ED%8C%8C%EC%9D%BC-%EC%88%98%EC%A0%95\" aria-label=\"sentry 설정파일 수정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>#sentry 설정파일 수정</h3>\n<p>위의 작업 까지 마쳤다면, sentry repo를 다운받은 경로로 가서 <a href=\"http://sentry.conf.py\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code>sentry.conf.py</code></a> 파일 찾자 보통 해당 repo 경로의 ./sentry 폴더 밑에 존재할거다. <code>sentry.conf.py</code> 파일을 열어서 수정한다.\n(처음에는 없지만, <code>./install.sh</code> 명령을 수행하고 나면, 해당 설정 파일이 생성되어있다.)</p>\n<pre class=\"grvsc-container monokai\" data-language=\"py\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># before</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">DATABASES</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk6\">&quot;default&quot;</span><span class=\"mtk1\">: {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk6\">&quot;ENGINE&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk6\">&quot;sentry.db.postgres&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk6\">&quot;NAME&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk6\">&quot;postgres&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk6\">&quot;USER&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk6\">&quot;postgres&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk6\">&quot;PASSWORD&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk6\">&quot;&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk6\">&quot;HOST&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk6\">&quot;postgres&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk6\">&quot;PORT&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk6\">&quot;&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># after</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">DATABASES</span><span class=\"mtk1\"> </span><span class=\"mtk7\">=</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk6\">&quot;default&quot;</span><span class=\"mtk1\">: {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk6\">&quot;ENGINE&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk6\">&quot;sentry.db.postgres&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk6\">&quot;NAME&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk6\">&quot;sentry&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk6\">&quot;USER&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk6\">&quot;posgres&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk6\">&quot;PASSWORD&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk6\">&quot;</span><span class=\"mtk4\">{password}</span><span class=\"mtk6\">&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk6\">&quot;HOST&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk6\">&quot;postgres&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk6\">&quot;PORT&quot;</span><span class=\"mtk1\">: </span><span class=\"mtk6\">&quot;&quot;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>기존 sentry의 db 명칭과 유저 명칭을 postgres 로 하였다면 수정하지 않고 그대로 놔둬도 된다. 하지만, 다른 이름을 사용하였다면 기존 sentry db에서 사용한 database의 이름과 user/pw를 입력해야 한다. 필자가 쓴 이전 sentry 설정 글을 보고서 만들었다면, 아마도 name은 sentry로 되어있을 것이고, user도 sentry로 되어있을텐데, 그렇게 바꾸면 된다. 다만 유저는 postgres 유저도 같이 등록되어 있어서 그냥 놔뒀다.</p>\n<p>sentry의 메일 기능도 이용할 것이라면, 이전 sentry의 메일 설정을 등록해준다. 설정은 <code>config.yml</code>을 수정하면 되는데, <code>sentry.conf.py</code>와 같은 경로에 존재한다.</p>\n<pre class=\"grvsc-container monokai\" data-language=\"ps\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">#----- before -----</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">###############</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Mail Server #</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">###############</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># mail.backend: &#39;smtp&#39;  # Use dummy if you want to disable email entirely</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">mail.host: </span><span class=\"mtk6\">&#39;smtp&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># mail.port: 25</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># mail.username: &#39;&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># mail.password: &#39;&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">mail.</span><span class=\"mtk9\">use-tls</span><span class=\"mtk1\">: false</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># The email address to send on behalf of</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># mail.from: &#39;root@localhost&#39;</span></span></span></code></pre>\n<p>위의 형식이 원본 셋팅인데 본인 메일 설정에 맞게 변경한다.</p>\n<p>설정이 모두 완료되었다면 sentry 서비스를 실행한다. <code>docker-compose.yml</code>이 있는 경로로 이동한뒤에 여기서는 <code>./install.sh</code> 를 실행하지 않고, sentry를 upgrade 시켜준다.</p>\n<pre class=\"grvsc-container monokai\" data-language=\"ps\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># docker-compose cli를 이용하여 web 컨테이너 내부에 존재하는 sentry를 upgrade시킨다.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">$ sudo docker</span><span class=\"mtk7\">-</span><span class=\"mtk1\">compose run </span><span class=\"mtk7\">--</span><span class=\"mtk1\">rm web upgrade</span></span></span></code></pre>\n<p>물론 위의 작업을 수행할때는 <code>docker-compose down</code> 명령어를 이용하여 올라가있는 모든 컨테이너를 내리고, 기존의 sentry 서비스들과 db도 같이 내려둔다.\n기존 sentry의 데이터양에 따라서 시간이 오래 걸릴수 있다. 위의 작업이 모두 완료되었다면, docker-compose cli를 이용하여 서비스를 실행시켜준다.</p>\n<pre class=\"grvsc-container monokai\" data-language=\"jsx\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">sudo docker</span><span class=\"mtk7\">-</span><span class=\"mtk1\">compose up </span><span class=\"mtk7\">-</span><span class=\"mtk1\">d</span></span></span></code></pre>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .monokai {\n    background-color: #272822;\n    color: #f8f8f2;\n  }\n  .monokai .mtk3 { color: #75715E; }\n  .monokai .mtk1 { color: #F8F8F2; }\n  .monokai .mtk7 { color: #F92672; }\n  .monokai .mtk9 { color: #66D9EF; }\n  .monokai .mtk6 { color: #E6DB74; }\n  .monokai .mtk4 { color: #AE81FF; }\n  .monokai .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/posts/docker%EB%A5%BC_%EC%9D%B4%EC%9A%A9%ED%95%9C_Sentry_20_%EC%84%A4%EC%B9%98_upgrade/#sentry-2080-%EC%84%A4%EC%B9%98%EC%99%80-upgrade\">Sentry 20.8.0 설치와 Upgrade</a></p>\n<ul>\n<li><a href=\"/posts/docker%EB%A5%BC_%EC%9D%B4%EC%9A%A9%ED%95%9C_Sentry_20_%EC%84%A4%EC%B9%98_upgrade/#docker%EC%99%80-docker-compose%EC%9D%98-%EC%84%A4%EC%B9%98\">docker와 docker-compose의 설치</a></li>\n<li><a href=\"/posts/docker%EB%A5%BC_%EC%9D%B4%EC%9A%A9%ED%95%9C_Sentry_20_%EC%84%A4%EC%B9%98_upgrade/#git%EC%97%90%EC%84%9C-sentry-%EB%82%B4%EB%A0%A4%EB%B0%9B%EC%95%84-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0\">git에서 sentry 내려받아 설치하기</a></li>\n<li>\n<p><a href=\"/posts/docker%EB%A5%BC_%EC%9D%B4%EC%9A%A9%ED%95%9C_Sentry_20_%EC%84%A4%EC%B9%98_upgrade/#sentry-%EC%B5%9C%EC%8B%A0%EB%B2%84%EC%A0%84%EC%9C%BC%EB%A1%9C-upgrade\">Sentry 최신버전으로 Upgrade</a></p>\n<ul>\n<li><a href=\"/posts/docker%EB%A5%BC_%EC%9D%B4%EC%9A%A9%ED%95%9C_Sentry_20_%EC%84%A4%EC%B9%98_upgrade/#docker-compose-%EC%88%98%EC%A0%95\">#docker-compose 수정</a></li>\n<li><a href=\"/posts/docker%EB%A5%BC_%EC%9D%B4%EC%9A%A9%ED%95%9C_Sentry_20_%EC%84%A4%EC%B9%98_upgrade/#postgre-sql-upgrade\">#postgre-SQL upgrade</a></li>\n<li><a href=\"/posts/docker%EB%A5%BC_%EC%9D%B4%EC%9A%A9%ED%95%9C_Sentry_20_%EC%84%A4%EC%B9%98_upgrade/#install-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%84%A4%EC%B9%98\">#install 스크립트를 이용한 설치</a></li>\n<li><a href=\"/posts/docker%EB%A5%BC_%EC%9D%B4%EC%9A%A9%ED%95%9C_Sentry_20_%EC%84%A4%EC%B9%98_upgrade/#%EC%83%88%EB%A1%9C%EC%9A%B4-docker-%ED%99%98%EA%B2%BD%EC%9D%98-sentry-db-%EC%A0%84%EB%8B%AC\">#새로운 docker 환경의 sentry db 전달</a></li>\n<li><a href=\"/posts/docker%EB%A5%BC_%EC%9D%B4%EC%9A%A9%ED%95%9C_Sentry_20_%EC%84%A4%EC%B9%98_upgrade/#sentry-%EC%84%A4%EC%A0%95%ED%8C%8C%EC%9D%BC-%EC%88%98%EC%A0%95\">#sentry 설정파일 수정</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/posts/docker를_이용한_Sentry_20_설치_upgrade/","tagSlugs":["/tag/sentry/","/tag/docker/","/tag/docker-compose/","/tag/sentry-20-8-0/"]},"frontmatter":{"date":"2020-09-14T23:22:12.311Z","description":"Sentry on-premise 최신버전인 20.8.0 을 docker-compose를 이용하여 설치하는 방법과, 이전 docker를 사용하지 않은 9.1.2 버전을 docker를 사용한 형태로 upgrade 하는 방법에 대해서 다룹니다.","tags":["sentry","docker","docker-compose","sentry 20.8.0"],"title":"docker를 이용한 Sentry 20.8.0 설치와 Upgrade","socialImage":null},"headings":[{"value":"Sentry 20.8.0 설치와 Upgrade","depth":1},{"value":"docker와 docker-compose의 설치","depth":2},{"value":"git에서 sentry 내려받아 설치하기","depth":2},{"value":"Sentry 최신버전으로 Upgrade","depth":2},{"value":"#docker-compose 수정","depth":3},{"value":"#postgre-SQL upgrade","depth":3},{"value":"#install 스크립트를 이용한 설치","depth":3},{"value":"#새로운 docker 환경의 sentry db 전달","depth":3},{"value":"#sentry 설정파일 수정","depth":3}]}},"pageContext":{"slug":"/posts/docker를_이용한_Sentry_20_설치_upgrade/"}}}