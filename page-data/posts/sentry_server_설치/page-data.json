{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/sentry_server_설치/","result":{"data":{"markdownRemark":{"id":"7fdbbf02-bc71-5d93-b31a-db0f1f7a2f87","html":"<h2 id=\"sentry\"><a href=\"#sentry\" aria-label=\"sentry permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sentry</h2>\n<p>Error tracking과 Log 관리등을 원격으로 관리할 수 있게 해주는 모니터링 Server</p>\n<h2 id=\"sentry-서버-설치\"><a href=\"#sentry-%EC%84%9C%EB%B2%84-%EC%84%A4%EC%B9%98\" aria-label=\"sentry 서버 설치 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sentry 서버 설치</h2>\n<ul>\n<li>Ubuntu:14.04</li>\n<li>python:2.7</li>\n</ul>\n<p>설치를 위한 기본 환경은 위와 같으며 sentry 설치 전 몇가지 setting을 해주어야 한다.</p>\n<ol>\n<li>sentry 의 원할한 설치 및 구동을 위해서 sentry라는 명칭의 계정을 생성한다</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># 해당 명령어 실행 후 나오는 입력 내용을 순차적으로 입력한다.(Id, password, name 등등)</span>\n$ adduser sentry</code></pre></div>\n<ol start=\"2\">\n<li>sentry 설치를 위한 모듈들 설치</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> -y python-pip<span class=\"token punctuation\">\\</span>\n\tpython-setuptools<span class=\"token punctuation\">\\</span>\n\tpython-dev<span class=\"token punctuation\">\\</span>\n    libxslt1-dev<span class=\"token punctuation\">\\</span>\n    gcc<span class=\"token punctuation\">\\</span>\n    libffi-dev<span class=\"token punctuation\">\\</span>\n\tlibjpeg-dev<span class=\"token punctuation\">\\</span>\n\tlibxml2-dev<span class=\"token punctuation\">\\</span>\n\tlibxslt-dev<span class=\"token punctuation\">\\</span>\n\tlibyaml-dev<span class=\"token punctuation\">\\</span>\n\tlibpq-dev\n\t</code></pre></div>\n<ol start=\"3\">\n<li>위의 작업까지 마무리 하였다면 다음으로 worker의 역할과 issue 보관을 위한 redis와 postgresql을 설치해야 한다. worker의 역할은 rabbitMQ도 사용 가능하지만 여기서는 redis를 사용한다.</li>\n</ol>\n<h3 id=\"--sentry-연동을-위한-postgresql-설치-및-셋팅-postgresql94\"><a href=\"#--sentry-%EC%97%B0%EB%8F%99%EC%9D%84-%EC%9C%84%ED%95%9C-postgresql-%EC%84%A4%EC%B9%98-%EB%B0%8F-%EC%85%8B%ED%8C%85-postgresql94\" aria-label=\"  sentry 연동을 위한 postgresql 설치 및 셋팅 postgresql94 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- Sentry 연동을 위한 PostgreSQL 설치 및 셋팅 (PostgreSQL:9.4)</h3>\n<blockquote>\n<p>PostgreSQL은 12.04, 14.04, 16.04 버전의 경우는 ubuntu의 apt repo를 통한 설치를 정상적으로 지원한다.</p>\n<p>또한, 버전에 따라서 설치에 조금씩의 차이가 있는데 해당 방법은 <a href=\"https://www.postgresql.org/download/linux/ubuntu/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">링크</a>를 통해서 안내한다. 여기서는 14.04 버전을 기준으로 안내한다.</p>\n</blockquote>\n<ul>\n<li>\n<p>PostgreSQL 설치</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># 우선 pgdg list를 만든다. (이미 존재하는 경우 파일 생성없이 내용만 추가)</span>\n$ <span class=\"token builtin class-name\">cd</span> /etc/apt/sources.list.d/\n$ <span class=\"token function\">touch</span> pgdg.list\n\n<span class=\"token comment\"># pgdg.list 파일 생성 후 해당 파일내에 아래의 내용을 추가 후 저장한다.</span>\ndeb http://apt.postgresql.org/pub/repos/apt/ trusty-pgdg main\n\n<span class=\"token comment\"># 이후에 아래의 명령어를 수행한다.</span>\n$ <span class=\"token function\">wget</span> --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc <span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span>\n\t<span class=\"token function\">sudo</span> apt-key <span class=\"token function\">add</span> -\n$ <span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update\n\n<span class=\"token comment\"># 위의 작업까지 완료하였다면 아래의 명령어로 postgresql을 설치한다.</span>\n$ <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> postgresql-9.4</code></pre></div>\n</li>\n<li>\n<p>PostgreSQL 셋팅 ( PostgreSQL 명령어 <a href=\"https://www.postgresql.org/docs/current/static/sql-commands.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">링크</a>)</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># postgresql 관리자 계정이 정상적으로 생성되어 있는지를 확인한다.</span>\n$ <span class=\"token function\">cat</span> /etc/password <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">'postgres'</span> \n\n<span class=\"token comment\"># PostgreSQL 작동여부 체크</span>\n$ /etc/init.d/postgresql status\n\n<span class=\"token comment\"># 작동중이지 않다면 start 명령을 이용하여 작동시켜준다.(이미 동작중이면 실행하지 않아도 된다.)</span>\n$ /etc/init.d/postgresql start\n\n<span class=\"token comment\">## 관리자 계정의 password 변경 및 sentry 계정 생성을 위해서 psql에 접근</span>\n<span class=\"token comment\"># 관리자 계정 postgres로 접근</span>\n$ <span class=\"token function\">sudo</span> -u postgres psql template1\n\n<span class=\"token comment\"># password 변경</span>\n<span class=\"token assign-left variable\">template1</span><span class=\"token operator\">=</span><span class=\"token comment\"># ALTER USER postgres with encrypted password '패스워드';</span>\n\n<span class=\"token comment\"># sentry 계정 추가 및 LOGIN 권한 부여 (Password는 위에서 postgres 계정에 부여 하듯이 하면 된다.)</span>\n<span class=\"token assign-left variable\">template1</span><span class=\"token operator\">=</span><span class=\"token comment\"># CREATE ROLE sentry WITH LOGIN;</span>\n\n<span class=\"token comment\"># 계정 추가 후 해당 계정에 권한을 추가한다. (sentry 실행시 관련 db등을 생성하기에 sentry 계정 사용시 권한이 있어야 한다.)</span>\n<span class=\"token assign-left variable\">template1</span><span class=\"token operator\">=</span><span class=\"token comment\"># ALTER ROLE sentry WITH CREATEDB CREATEROLE;</span>\n\n<span class=\"token comment\"># 데이터 베이스 권한 부여</span>\n<span class=\"token assign-left variable\">template1</span><span class=\"token operator\">=</span><span class=\"token comment\"># GRANT ALL ON DATABASE databasename TO username;</span>\n\n<span class=\"token comment\"># 작업을 모두 마치면 정상적으로 접근 가능한지 Test., 두개의 계정모두 접속 가능한지 test 한다.</span>\n$ psql -h <span class=\"token number\">127.0</span>.0.1 -U postgres template1 \n$ psql -h <span class=\"token number\">127.0</span>.0.1 -U sentry template1 </code></pre></div>\n</li>\n</ul>\n<h3 id=\"--redis-설치-및-셋팅-redis329\"><a href=\"#--redis-%EC%84%A4%EC%B9%98-%EB%B0%8F-%EC%85%8B%ED%8C%85-redis329\" aria-label=\"  redis 설치 및 셋팅 redis329 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- Redis 설치 및 셋팅 (Redis:3.2.9)</h3>\n<blockquote>\n<p>Redis의 설치 및 셋팅은 다른 문서(링크)로 대체한다.</p>\n</blockquote>\n<h3 id=\"--sentry-서버-설치-및-셋팅-sentry8180\"><a href=\"#--sentry-%EC%84%9C%EB%B2%84-%EC%84%A4%EC%B9%98-%EB%B0%8F-%EC%85%8B%ED%8C%85-sentry8180\" aria-label=\"  sentry 서버 설치 및 셋팅 sentry8180 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- Sentry 서버 설치 및 셋팅 (Sentry:8.18.0)</h3>\n<ol>\n<li>sentry는 python기반의 서버이므로 virtualenv를 먼저 설치 한 뒤 가상환경을 셋팅한다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># virtualenv install </span>\n$ pip <span class=\"token function\">install</span> -U virtualenv\n\n<span class=\"token comment\"># virtualenv setting</span>\n$ virtualenv ~/.venv/sentry\n\n<span class=\"token comment\"># virtualenv activate</span>\n$ <span class=\"token builtin class-name\">.</span> ~/.venv/sentry/bin/activate\n\n<span class=\"token comment\"># sentry 설치</span>\n$ pip <span class=\"token function\">install</span> -U sentry</code></pre></div>\n<p> 위의 작업까지 성공적으로 이어졌다면 sentry 서버 구동을 위한 설정 및 실행을 하면 된다. 하지만 정상적으로 구동하지 않고 에러가 출력되면 그에 대응하는 작업을 수행해야 한다.  에러 메시지는 사용자의 상황마다 다르므로 여기서는 2개 정도의 에러에 대해서만 간략히 설명한다.</p>\n<blockquote>\n<p>E1: ValueError: jpeg is required unless explicitly disabled using —disable-jpeg, aborting</p>\n<blockquote>\n<p><code class=\"language-text\">sudo apt-get install libjpeg-dev zlib1g-dev</code> 수행., 관련 모듈 설치</p>\n</blockquote>\n<p>E2: error: command ‘x86_64-linux-gnu-gcc’ failed with exit status 1</p>\n<blockquote>\n<p><code class=\"language-text\">sudo apt-get install libssl-dev libffi-dev</code> 수행., 관련 모듈 설치</p>\n</blockquote>\n</blockquote>\n<ol start=\"2\">\n<li>sentry설치를 마쳤다면, sentry 설정을 진행한다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># init 파일 생성(기본 생성 위치는 '~/.sentry' 이다)</span>\n$ sentry init <span class=\"token punctuation\">{</span>경로 위치<span class=\"token punctuation\">}</span>\nex<span class=\"token punctuation\">)</span> sentry init or sentry init /etc/sentry</code></pre></div>\n<p>  위의 명령어 실행 후 해당 위치에 생성된 sentry.conf.py 파일을 수정</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># ~/.sentry/sentry.conf.py</span>\n\n<span class=\"token comment\"># for more information on DATABASES, see the Django configuration at:</span>\n<span class=\"token comment\"># https://docs.djangoproject.com/en/1.6/ref/databases/</span>\nDATABASES <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'default'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'ENGINE'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'sentry.db.postgres'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'NAME'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'sentry'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'USER'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'sentry'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\"># postgresql에 등록한 계정으로 입력</span>\n        <span class=\"token string\">'PASSWORD'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'postgresql 계정 password'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'HOST'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token comment\"># local인 경우 127.0.0.1</span>\n        <span class=\"token string\">'PORT'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token comment\"># postgresql의 port</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>Redis의 경우 기본 설정을 그대로 사용한다면 별도로 수정할 부분은 없다</p>\n<p>mail발송을 위한 설정을 할 수 있지만 여기서는 다루지 않는다(메일서버는 sendmail을 이용하는 것이 일반적이다)</p>\n</blockquote>\n<ol start=\"3\">\n<li>모든 설정을 마무리 하였으면 순차적으로 명령어를 실행하여 migration 작업을 수행한다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># sentry migration</span>\n<span class=\"token comment\"># DB 생성에 있어서 여기서는 sentry 라는 명칭을 사용한다.</span>\n$ createdb -E utf-8 sentry\n\n<span class=\"token comment\"># 아래의 명령을 수행하면 postgresql/redis에 sentry 관련 데이터를 생성하며, sentry 계정을 만들수 있다.</span>\n<span class=\"token comment\"># 이때에 superuser를 만들지 여부를 물어보는데 여기서 만들어야지 이후에 다시 만드는 작업을 하지 않아도 된다.</span>\n$ sentry upgrade\n\n<span class=\"token comment\"># 추가로 user를 만들생각이면 아래의 명령어로 만들어 주어도 된다.</span>\n$ sentry createuser</code></pre></div>\n<ol start=\"4\">\n<li>migration 까지 마무리 하였다면, 서버를 실행한다. </li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># sentry의 web 서버</span>\n$ sentry run web\n\n<span class=\"token comment\"># sentry의 worker</span>\n$ sentry run worker\n\n<span class=\"token comment\"># sentry의 cron process</span>\n$ sentry run <span class=\"token function\">cron</span>\n\n<span class=\"token comment\"># 위와 같이 3개의 서비스를 실행시켜야 정상적인 수행이 가능하다.</span></code></pre></div>\n<ol start=\"5\">\n<li><a href=\"https://docs.sentry.io/server/installation/python/#setup-a-reverse-proxy\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">nginx 를 이용한 proxy 서버 연동</a> 및 <a href=\"https://docs.sentry.io/server/installation/python/#enabling-ssl\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SSL 인증</a>에 대해서는 여기서 다루지 않고 링크를 참조한다.</li>\n</ol>\n<h3 id=\"--daemon으로-실행\"><a href=\"#--daemon%EC%9C%BC%EB%A1%9C-%EC%8B%A4%ED%96%89\" aria-label=\"  daemon으로 실행 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- Daemon으로 실행</h3>\n<p>위의 단계를 모두 진행하였으면 sentry 서버를 실행하고 사용하는데는 문제가 없지만, daemon 형태로 서비스를 수행하기 위해서는 systemd, upstart와 같은 프로그램을 이용해서 안정적으로 사용이 가능하다.</p>\n<blockquote>\n<p> 추가적으로 ubuntu 15부터 systemd를 지원하며, LTS 버전으로 한정할 경우 16버전부터 지원을 한다.</p>\n<p>문서에서 설명한 ubuntu 14에서는 upstart를 사용하므로 upstart 스크립트 작성 및 사용법을 기술한다.</p>\n<p>systemd를 이용하여 서비스하는 방법은 <a href=\"https://docs.sentry.io/server/installation/python/#running-sentry-as-a-service\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">링크</a> 참조.</p>\n</blockquote>\n<p>upstart를 이용하여 daemon을 구동할 경우, 시스템 부팅시의 자동 실행 및 서비스 종료시 자동 재시작 로그파일 기록 등등의 장점이 있다. 우선은 아래의 script를 작성하여야 한다. (예시에서는 web만을 작성하였지만 실제로는 worker, cron 등에 대한 script도 만들어야 한다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># upstart에서 수행되는 서비스들의 script는 /etc/init/ 경로에 ***.conf 파일의 형태로 작성해줘야 한다.</span>\n$ <span class=\"token builtin class-name\">cd</span> /etc/init/\n$ <span class=\"token function\">touch</span> sentry-web.conf\n\n<span class=\"token comment\"># 위에서 생성한 sentry-web.conf 파일을 열어서 script 내용을 등록한다.</span>\n$ <span class=\"token function\">vim</span> sentry-web.conf</code></pre></div>\n<p>위의 작업까지 수행하였다면 아래의 코드를 위에서 만들어둔 <code class=\"language-text\">sentry-web.conf</code> 파일에 작성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># /etc/init/sentry-web.conf</span>\nstart on runlevel <span class=\"token punctuation\">[</span><span class=\"token number\">2346</span><span class=\"token punctuation\">]</span>\nstop on runlevel <span class=\"token punctuation\">[</span>016<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># 서비스가 오류로 종료시에 자동 재시작</span>\n<span class=\"token comment\"># (단, 너무 빨리 재시작 되는것에 대한 제한을 수정. 5초 동안 4번 재시작 되면 재시작 하지 않음)</span>\nrespawn limit <span class=\"token number\">4</span> <span class=\"token number\">5</span>\n\n<span class=\"token function\">env</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">USER</span></span><span class=\"token operator\">=</span>www-data\n<span class=\"token function\">env</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n<span class=\"token function\">env</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PWD</span></span><span class=\"token operator\">=</span>/usr/local/lib/python2.7/dist-packages\n\n<span class=\"token comment\"># script가 수행되기 전 해당 서비스의 log 생성 및 권한 부여</span>\npre-start script\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">!</span> -f /var/log/sentry-web.log <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token function\">touch</span> /var/log/sentry-web.log\n    <span class=\"token function\">chown</span> -f <span class=\"token environment constant\">$USER</span> /var/log/sentry-web.log\n  <span class=\"token keyword\">fi</span>\nend script\n\n<span class=\"token comment\"># 서비스 수행을 위한 main script</span>\nscript\n<span class=\"token builtin class-name\">.</span> /home/sentry/activate  <span class=\"token comment\"># venv 실행</span>\nstart-stop-daemon --start <span class=\"token punctuation\">\\</span>  <span class=\"token comment\"># daemon으로 수행</span>\n  --make-pidfile --pidfile /var/run/sentry-web.pid <span class=\"token punctuation\">\\</span> <span class=\"token comment\"># proccess id 파일</span>\n  --chuid <span class=\"token environment constant\">$USER</span> <span class=\"token punctuation\">\\</span>\n  --chdir <span class=\"token environment constant\">$PWD</span> <span class=\"token punctuation\">\\</span>\n  --exec /home/sentry/.venv/sentry/local/bin/sentry<span class=\"token punctuation\">\\</span>\n        --config<span class=\"token operator\">=</span>/home/sentry/.sentry/<span class=\"token punctuation\">\\</span> <span class=\"token comment\"># sentry 수행을 위한 환경설정파일</span>\n        run web <span class=\"token operator\">>></span> /var/log/sentry-web.log <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token comment\"># web 서비스 수행 및 log stdout/stderr 로그 등록</span>\nend script\n\n<span class=\"token comment\"># 서비스 종료시에 process id 삭제</span>\npost-stop script\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> -f /var/run/sentry-web.pid <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token function\">rm</span> /var/run/sentry-web.pid\n  <span class=\"token keyword\">fi</span>\nend script</code></pre></div>\n<p>위와 같이 작성 완료 후  <code class=\"language-text\">sudo start sentry-web</code>  명령어를 실행하면 web이 daemon 으로 수행된다. worker, cron도 위와 같이 script를 작성한 뒤에 실행시켜주면 해당 서비스를 수행할 수 있다.</p>\n<blockquote>\n<p>나머지 worker, cron에 관련한 script</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># /etc/init/sentry-worker.conf</span>\nstart on runlevel <span class=\"token punctuation\">[</span><span class=\"token number\">2345</span><span class=\"token punctuation\">]</span>\nstop on runlevel <span class=\"token punctuation\">[</span>016<span class=\"token punctuation\">]</span>\n\nrespawn limit <span class=\"token number\">4</span> <span class=\"token number\">5</span>\n\n<span class=\"token function\">env</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">USER</span></span><span class=\"token operator\">=</span>www-data\n<span class=\"token function\">env</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n<span class=\"token function\">env</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PWD</span></span><span class=\"token operator\">=</span>/usr/local/lib/python2.7/dist-packages\n\npre-start script\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">!</span> -f /var/log/sentry-web.log <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token function\">touch</span> /var/log/sentry-worker.log\n    <span class=\"token function\">chown</span> -f <span class=\"token environment constant\">$USER</span> /var/log/sentry-worker.log\n  <span class=\"token keyword\">fi</span>\nend script\n\nscript\n<span class=\"token builtin class-name\">.</span> /home/sentry/activate\nstart-stop-daemon --start <span class=\"token punctuation\">\\</span>\n  --make-pidfile --pidfile /var/run/sentry-worker.pid <span class=\"token punctuation\">\\</span>\n  --chuid <span class=\"token environment constant\">$USER</span> <span class=\"token punctuation\">\\</span>\n  --chdir <span class=\"token environment constant\">$PWD</span> <span class=\"token punctuation\">\\</span>\n  --exec /home/sentry/.venv/sentry/local/bin/sentry<span class=\"token punctuation\">\\</span>\n        -- --config<span class=\"token operator\">=</span>/home/sentry/.sentry/<span class=\"token punctuation\">\\</span>\n        run worker <span class=\"token operator\">>></span> /var/log/sentry-worker.log <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span>\nend script\n\npost-stop script\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> -f /var/run/sentry-worker.pid <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token function\">rm</span> /var/run/sentry-worker.pid\n  <span class=\"token keyword\">fi</span>\nend script</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># /etc/init/sentry-cron.conf</span>\nstart on runlevel <span class=\"token punctuation\">[</span><span class=\"token number\">2345</span><span class=\"token punctuation\">]</span>\nstop on runlevel <span class=\"token punctuation\">[</span>016<span class=\"token punctuation\">]</span>\n\nrespawn limit <span class=\"token number\">4</span> <span class=\"token number\">5</span>\n\n<span class=\"token function\">env</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">USER</span></span><span class=\"token operator\">=</span>www-data\n<span class=\"token function\">env</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n<span class=\"token function\">env</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PWD</span></span><span class=\"token operator\">=</span>/usr/local/lib/python2.7/dist-packages\n\npre-start script\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">!</span> -f /var/log/sentry-cron.log <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token function\">touch</span> /var/log/sentry-cron.log\n    <span class=\"token function\">chown</span> -f <span class=\"token environment constant\">$USER</span> /var/log/sentry-cron.log\n  <span class=\"token keyword\">fi</span>\nend script\n\nscript\n<span class=\"token builtin class-name\">.</span> /home/sentry/activate\nstart-stop-daemon --start <span class=\"token punctuation\">\\</span>\n  --make-pidfile --pidfile /var/run/sentry-cron.pid <span class=\"token punctuation\">\\</span>\n  --chuid <span class=\"token environment constant\">$USER</span> <span class=\"token punctuation\">\\</span>\n  --chdir <span class=\"token environment constant\">$PWD</span> <span class=\"token punctuation\">\\</span>\n  --exec /home/sentry/.venv/sentry/local/bin/sentry<span class=\"token punctuation\">\\</span>\n        -- --config<span class=\"token operator\">=</span>/home/sentry/.sentry/<span class=\"token punctuation\">\\</span>\n        run <span class=\"token function\">cron</span> <span class=\"token operator\">>></span> /var/log/sentry-cron.log <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span>\nend script\n\npost-stop script\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> -f /var/run/sentry-cron.pid <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token function\">rm</span> /var/run/sentry-cron.pid\n  <span class=\"token keyword\">fi</span>\nend script</code></pre></div>\n<blockquote>\n<p>이전 버전의 경우 환경설정의 경로를 <code class=\"language-text\">{your path}/sentry/sentry.conf.py</code> 로 표기하는 경우가 있는데 그럴경우 secret-key 가 없어서 새로 생성하라는 메시지가 뜨는 경우가 있다. 실제로 secret-key가 없는 경우일수도 있지만, 경로가 잘못되어서 발생하는 문제일 수 있다. 최신버전의 sentry는 config.yaml 파일에 secret-key가 존재하기에 최신버전의 경우 환경설정파일 경로를  <code class=\"language-text\">{your path}/sentry/</code> 로 지정해주어야 한다.</p>\n</blockquote>\n<h2 id=\"sentry-upgrade\"><a href=\"#sentry-upgrade\" aria-label=\"sentry upgrade permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sentry Upgrade</h2>\n<blockquote>\n<p>내용 정리 필요. 일단 간단하게 마구 작성함</p>\n</blockquote>\n<ol>\n<li>sentry 설치된 서버에 ssh로 접근</li>\n<li>sentry가 설치된 python 환경설정 on</li>\n<li>\n<p>sentry upgrade </p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">pip <span class=\"token function\">install</span> -U sentry</code></pre></div>\n</li>\n<li>설치 다되면, 설정 파일 새로 만들어줌., 단 무조건 꼭 만들어야 하는건 아니고 나도 새로 안만들고 함 하지만 문서를 보면 major update인 경우에는 설정 파일을 새로 만드는 것을 추천한다고 쓰여 있음.</li>\n<li>\n<p>sentry 업그레이드를 진행함</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">sentry upgrade</code></pre></div>\n</li>\n<li>그대로 진행하면 upgrade가 됨 이제 sentry의 모든 서비스들을 새로 켜줘야함.\nweb, worker, cron 등을 모두 종료했다가 새로 켜줌., 그러면 upgrade 완료</li>\n<li></li>\n</ol>\n<p>sentry upgrade 참조 링크</p>\n<ol>\n<li><a href=\"https://docs.sentry.io/server/upgrading/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.sentry.io/server/upgrading/</a></li>\n<li><code class=\"language-text\">sentry upgrade</code> 명령어 실행시 <code class=\"language-text\">superuser</code> 문제에 따른 권한 이슈가 나온다 </li>\n</ol>\n<p>그럴때 아래 링크 참조</p>\n<p><a href=\"https://github.com/getsentry/sentry/issues/6098#issuecomment-329824716\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/getsentry/sentry/issues/6098#issuecomment-329824716</a></p>\n<blockquote>\n<p>링크 정리 후 내용 정리</p>\n</blockquote>\n<p>메일 발송 기능 내용 추가 update 필요</p>\n<blockquote>\n<p>config.yaml</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">###############\n# Mail Server #\n###############\n\nmail.backend: &#39;smtp&#39;  # Use dummy if you want to disable email entirely\nmail.host: &#39;kinx.net&#39;\nmail.port: 25\nmail.username: &#39;&#39;\nmail.password: &#39;&#39;\nmail.use-tls: false\n# The email address to send on behalf of\nmail.from: &#39;sentry@kinx.net&#39;</code></pre></div>\n</blockquote>\n<blockquote>\n<p>sentry.conf.py</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ENV_CONFIG_MAPPING = {\n    &#39;SENTRY_EMAIL_PASSWORD&#39;: &#39;mail.password&#39;,\n    &#39;SENTRY_EMAIL_USER&#39;: &#39;mail.username&#39;,\n    &#39;SENTRY_EMAIL_PORT&#39;: (&#39;mail.port&#39;, Int),\n    &#39;SENTRY_EMAIL_USE_TLS&#39;: (&#39;mail.use-tls&#39;, Bool),\n    &#39;SENTRY_EMAIL_HOST&#39;: &#39;mail.host&#39;,\n    &#39;SENTRY_SERVER_EMAIL&#39;: &#39;mail.from&#39;,\n    &#39;SENTRY_ENABLE_EMAIL_REPLIES&#39;: (&#39;mail.enable-replies&#39;, Bool),\n    &#39;SENTRY_EMAIL_LIST_NAMESPACE&#39;: &#39;mail.list-namespace&#39;,\n    &#39;SENTRY_SMTP_HOSTNAME&#39;: &#39;reply.getsentry.com&#39;,\n    &#39;SENTRY_SECRET_KEY&#39;: &#39;system.secret-key&#39;,\n    &#39;SENTRY_SMTP_HOST&#39;: &#39;0.0.0.0&#39;,\n    &#39;SENTRY_SMTP_PORT&#39;: 1025,\n\n\n    # If you&#39;re using mailgun for inbound mail, set your API key and configure a\n    # route to forward to /api/hooks/mailgun/inbound/\n    &#39;SENTRY_MAILGUN_API_KEY&#39;: &#39;mail.mailgun-api-key&#39;,\n}</code></pre></div>\n</blockquote>\n<p>추가로 저런식으로 해도 이상하게 use-tls가 계속 True로 잡히고, domain 주소가 바뀌지 않아서 직접 module 코드를 수정해 줘야함</p>\n<blockquote>\n<p>sentry/utils/email.py</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># 설치된 sentry 모듈에서 위의 파일경로를 찾아가서 직접 수정\n...\ndef get_connection(fail_silently=False):\n    &quot;&quot;&quot;\n    Gets an SMTP connection using our OptionsStore\n    &quot;&quot;&quot;\n    return _get_connection(\n        backend=get_mail_backend(),\n        host=&#39;localhost&#39;,\n        # host=options.get(&#39;mail.host&#39;),\n        port=25,\n        # port=options.get(&#39;mail.port&#39;),\n        username=options.get(&#39;mail.username&#39;),\n        password=options.get(&#39;mail.password&#39;),\n        use_tls=False,\n        # use_tls=options.get(&#39;mail.use-tls&#39;),\n        timeout=options.get(&#39;mail.timeout&#39;),\n        fail_silently=fail_silently,\n    )\n...\n\n...\ndef send_messages(messages, fail_silently=False):\n    connection = get_connection(fail_silently=fail_silently)\n\n    # 아래의 로직은 from_email 주소를 특정 domain으로 수정하기 위한 작업\n    for message in messages:\n      message.from_email = &#39;sentry@kinx.net&#39;\n\n    sent = connection.send_messages(messages)\n    metrics.incr(&#39;email.sent&#39;, len(messages), skip_internal=False)\n    for message in messages:\n        extra = {\n            &#39;message_id&#39;: message.extra_headers[&#39;Message-Id&#39;],\n            &#39;size&#39;: len(message.message().as_bytes()),\n        }\n        logger.info(&#39;mail.sent&#39;, extra=extra)\n    return sent\n...</code></pre></div>\n</blockquote>","tableOfContents":"<ul>\n<li><a href=\"/posts/sentry_server_%EC%84%A4%EC%B9%98/#sentry\">Sentry</a></li>\n<li>\n<p><a href=\"/posts/sentry_server_%EC%84%A4%EC%B9%98/#sentry-%EC%84%9C%EB%B2%84-%EC%84%A4%EC%B9%98\">Sentry 서버 설치</a></p>\n<ul>\n<li><a href=\"/posts/sentry_server_%EC%84%A4%EC%B9%98/#--sentry-%EC%97%B0%EB%8F%99%EC%9D%84-%EC%9C%84%ED%95%9C-postgresql-%EC%84%A4%EC%B9%98-%EB%B0%8F-%EC%85%8B%ED%8C%85-postgresql94\">- Sentry 연동을 위한 PostgreSQL 설치 및 셋팅 (PostgreSQL:9.4)</a></li>\n<li><a href=\"/posts/sentry_server_%EC%84%A4%EC%B9%98/#--redis-%EC%84%A4%EC%B9%98-%EB%B0%8F-%EC%85%8B%ED%8C%85-redis329\">- Redis 설치 및 셋팅 (Redis:3.2.9)</a></li>\n<li><a href=\"/posts/sentry_server_%EC%84%A4%EC%B9%98/#--sentry-%EC%84%9C%EB%B2%84-%EC%84%A4%EC%B9%98-%EB%B0%8F-%EC%85%8B%ED%8C%85-sentry8180\">- Sentry 서버 설치 및 셋팅 (Sentry:8.18.0)</a></li>\n<li><a href=\"/posts/sentry_server_%EC%84%A4%EC%B9%98/#--daemon%EC%9C%BC%EB%A1%9C-%EC%8B%A4%ED%96%89\">- Daemon으로 실행</a></li>\n</ul>\n</li>\n<li><a href=\"/posts/sentry_server_%EC%84%A4%EC%B9%98/#sentry-upgrade\">Sentry Upgrade</a></li>\n</ul>","fields":{"slug":"/posts/sentry_server_설치/","tagSlugs":["/tag/sentry/","/tag/python/"]},"frontmatter":{"date":"2019-11-11 19:27:46.081432","description":"Error tracking과 Log 관리등을 원격으로 관리할 수 있게 해주는 모니터링 서비스 Sentry를 직접 설치 및 운영한다.","tags":["Sentry","python"],"title":"Sentry server 설치","socialImage":null},"headings":[{"value":"Sentry","depth":2},{"value":"Sentry 서버 설치","depth":2},{"value":"- Sentry 연동을 위한 PostgreSQL 설치 및 셋팅 (PostgreSQL:9.4)","depth":3},{"value":"- Redis 설치 및 셋팅 (Redis:3.2.9)","depth":3},{"value":"- Sentry 서버 설치 및 셋팅 (Sentry:8.18.0)","depth":3},{"value":"- Daemon으로 실행","depth":3},{"value":"Sentry Upgrade","depth":2}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/sentry_server_설치/"}}}