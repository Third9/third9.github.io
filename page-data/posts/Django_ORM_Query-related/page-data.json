{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/Django_ORM_Query-related/","result":{"data":{"markdownRemark":{"id":"dd99fb78-53eb-505e-a3a6-3186f47c5252","html":"<h2 id=\"query-related-class\" style=\"position:relative;\"><a href=\"#query-related-class\" aria-label=\"query related class permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Query-related class</h2>\n<h3 id=\"-intro\" style=\"position:relative;\"><a href=\"#-intro\" aria-label=\" intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>> Intro</h3>\n<p>Django에서 ORM을 사용하는데 있어서 보통의(가벼운) SQL 작업에는 큰 문제가 없지만, 여러개의 Table을 join 또는 조건문을 거는 경우에는 일반적으로 사용하던 방식으로 ORM을 사용하면 사용이 어렵거나 복잡해지는 경우가 있다.</p>\n<p>이러한 문제를 조금이라도 Django에서는 Query-related class 가 존재한다. </p>\n<p>여기서 설명할 것은 <code class=\"language-text\">F</code>와 <code class=\"language-text\">Q</code> 이다. F와 Q는 모두 Django ORM에서 활용되는 method인데 이를 이용하면 SQL문의 캡슐화 및 DB 레벨에서의 사용이 가능하다는 장점이 있다.</p>\n<h3 id=\"-f-expressions\" style=\"position:relative;\"><a href=\"#-f-expressions\" aria-label=\" f expressions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>> F() expressions</h3>\n<p><code class=\"language-text\">F()</code>의 기능은 모델의 Field와 관련한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># F()를 사용하지 않은 일반 field 값의 증가</span>\nmodel_obj <span class=\"token operator\">=</span> Model<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'third9'</span><span class=\"token punctuation\">)</span>\nmodel_obj<span class=\"token punctuation\">.</span>age_field <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\nmodel_obj<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># F()를 사용한 일반 field 값의 증가</span>\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> F\n\nmodel_obj <span class=\"token operator\">=</span> model_obj<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'third9'</span><span class=\"token punctuation\">)</span>\nmodel_obj<span class=\"token punctuation\">.</span>age_field <span class=\"token operator\">=</span> F<span class=\"token punctuation\">(</span><span class=\"token string\">'age_field'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\nmodel_obj<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위의 예시와 같이 사용가능하다. 위의 내용만 보았을때는 <code class=\"language-text\">F</code>를 사용할뿐 실제 결과값이 달라지지는 않는다. 다만 문서에서는 <code class=\"language-text\">F</code>를 이용한 방식은 SQL 구조적으로 되어있다고 하는데, 이부분은 위의 예시에서 <code class=\"language-text\">model_obj.age_field</code> 가 Model 객체에서 해당 필드의 값을 가져와 python 메모리에 저장하여 사용을 한다면, <code class=\"language-text\">F(&#39;age_field&#39;)</code> 는 직접 DB단계에서 작업을 수행한다고 한다. 그러한 이점으로 </p>\n<p>F() 를 사용하는 방식이 python 친화적이면서 동시에 같은 Table의 field를 접근하여 작업 수행시에 발생할 수 있는 DB의 Race condition문제를 손쉽게 회피 할 수 있다고 한다.</p>\n<p>개인적으로는 F() 보다도 Q()를 더 자주 사용하게 되는데 Q()는 일반적인 query문을 간략하게 작성해서 객체로 저장, 참조 할 수 있도록 해준다. Server-side에서 query문을 사용할때 다양한 조건문을 추가하기도 하고, 분기에 따라서 조건을 다르게 하는 경우가 많은데 Q()를 이용하면, ORM에서 보다 깔끔하게 유사한 작업을 할 수 있다.</p>\n<h3 id=\"-q-objects\" style=\"position:relative;\"><a href=\"#-q-objects\" aria-label=\" q objects permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>> Q() objects</h3>\n<p> <code class=\"language-text\">Q()</code> 의 사용은 아래와 같이 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Q() 사용의 예시</span>\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Q\n\nModel<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>Q<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token string\">'value1'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> Q<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'value2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 또는 아래</span>\nq1 <span class=\"token operator\">=</span> Q<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token string\">'value1'</span><span class=\"token punctuation\">)</span>\nq2 <span class=\"token operator\">=</span> Q<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'value2'</span><span class=\"token punctuation\">)</span>\nModel<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>q1 <span class=\"token operator\">|</span> q2<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 또는 더 아래</span>\nq_query <span class=\"token operator\">=</span> Q<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token string\">'value1'</span><span class=\"token punctuation\">)</span>\nq_query<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Q<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'value2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Q<span class=\"token punctuation\">.</span>OR<span class=\"token punctuation\">)</span>\nModel<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>q_query<span class=\"token punctuation\">)</span>\n\n<span class=\"token triple-quoted-string string\">\"\"\" SQL 문\nSELECT * FROM model WHERE id='value1' OR name='value2' \n\"\"\"</span></code></pre></div>\n<p>위의 방식처럼 조건식을 넣을 수가 있다. 위는 Q를 OR로만 표현한 경우이고 AND, NOT 등에 대한 표현도 손쉽게 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 위의 코드에 이어서 </span>\n\n<span class=\"token comment\"># AND</span>\nModel<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>Q<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token string\">'value1'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> Q<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'value2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># NOR</span>\nModel<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>Q<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token string\">'value1'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token operator\">~</span>Q<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'value2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p> 위에 나온 방식들을 모두 활용한다면 아래와 같이 사용가능 하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">\"\"\" 원하는 SQL 문\nSELECT * \nFROM model \nWHERE name='value1' or (id='value2' and age > 15)\n\"\"\"</span>\n\nq_query <span class=\"token operator\">=</span> Q<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'value1'</span><span class=\"token punctuation\">)</span>\nq_query<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>Q<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span><span class=\"token string\">'value2'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> Q<span class=\"token punctuation\">(</span>age_gt<span class=\"token operator\">=</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Q<span class=\"token punctuation\">.</span>OR<span class=\"token punctuation\">)</span>\n\nModel<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>q_query<span class=\"token punctuation\">)</span></code></pre></div>\n<p>위의 F()와 Q()를 잘 활용하면 Django ORM을 사용하는데 있어서 보다 효율적인 사용이 가능하다.</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/posts/Django_ORM_Query-related/#query-related-class\">Query-related class</a></p>\n<ul>\n<li><a href=\"/posts/Django_ORM_Query-related/#-intro\">> Intro</a></li>\n<li><a href=\"/posts/Django_ORM_Query-related/#-f-expressions\">> F() expressions</a></li>\n<li><a href=\"/posts/Django_ORM_Query-related/#-q-objects\">> Q() objects</a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/posts/Django_ORM_Query-related/","tagSlugs":["/tag/python/","/tag/django/","/tag/orm/"]},"frontmatter":{"date":"2019-12-27 17:00:00.704249","description":"Django ORM에서 Query-related를 사용하며, 헷갈리던 부분들에 대한 정리","tags":["python","django","orm"],"title":"Django ORM의 Query-related 정리","socialImage":null},"headings":[{"value":"Query-related class","depth":2},{"value":"> Intro","depth":3},{"value":"> F() expressions","depth":3},{"value":"> Q() objects","depth":3}]}},"pageContext":{"slug":"/posts/Django_ORM_Query-related/"}}}