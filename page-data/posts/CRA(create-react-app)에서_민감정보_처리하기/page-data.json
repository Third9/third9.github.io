{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/CRA(create-react-app)에서_민감정보_처리하기/","result":{"data":{"markdownRemark":{"id":"6aad8b88-8e62-5241-ac06-668b277968e3","html":"<blockquote>\n<p>create-react-app을 이용하여 프로젝트를 진행하는 상황에서 민감정보를 관리했던 방법에 대해서 정리한다. 해당 내용은 <code>create-react-app</code> 페이지의 <a href=\"https://create-react-app.dev/docs/adding-custom-environment-variables/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">adding-custom-environment-variables</a>문서를 참조하여 정리했다. </p>\n</blockquote>\n<p>민감 정보라 하면 보통 api의 endpoint 및 api 인증을 위한 token, id/pw와 같은 인증 정보들을 말한다. 보통 작업한 내용들의 경우 git등을 이용하여 코드 관리를 진행하는데, 이 과정에서 git에 민감 정보가 들어가는 경우 보안 위협 요소가 되기에 별도로 분리하여 관리를 한다.</p>\n<p>보통은 환경 변수에 등록하여 사용하거나 INI와 같은 설정 파일로 관리를 하는데 여기서는 별도의 .env 파일로 분리하여 관리하는 방법만 다룬다. 일반 환경파일로 설정하고 싶은 경우는 위의 링크를 참조하면 된다.</p>\n<p>프로젝트의 root 경로에 <code>.env</code> 파일을 생성 한뒤 아래와 유사하게 코드를 작성한다.</p>\n<pre class=\"grvsc-container monokai\" data-language=\"zshenv\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">REACT_APP_USERNAME=user_id</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">REACT_APP_PASSWORD=password</span></span></span></code></pre>\n<p>위의 코드가 끝이다. 사용하고 싶은 설정 값의 명칭을 위와 같이 추가하여 작성하면 된다. 여기서 주의할 점은 앞에는 항상 <code>REACT_APP_</code> 이 붙어야 한다는 것이다. 그래야 CRA에서 정상적인 환경설정 값으로 인지하여 사용이 가능하다.</p>\n<p>해당 값을 가져오는 방법은 별도의 모듈 호출 없이 CRA로 생성된 프로젝트 파일 내에서 공통으로 아래와 같이 작성하면 된다.</p>\n<pre class=\"grvsc-container monokai\" data-language=\"zshenv\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">// .env</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">let</span><span class=\"mtk1\"> username = process.env.REACT_APP_USERNAME</span><span class=\"mtk7\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk9\">let</span><span class=\"mtk1\"> password = process.env.REACT_APP_PASSWORD</span><span class=\"mtk7\">;</span></span></span></code></pre>\n<p>위와 같은 방식으로 환경설정 값을 가져와서 사용이 가능하다.</p>\n<p><code>.env</code> 파일에 들어가는 형식 및 사용 스타일을 봤을때 서비스가 실행되는 시점에서 <code>.env</code>의 파일을 환경 변수에 등록하여 사용하는 듯 하다.</p>\n<p>여기서 추가적으로 <code>.env</code>파일명 뒤에 , <code>.test, .local, .development</code> 등의 이름을 붙여서 각 개발 환경에 맞추어 적용하는 방법도 있으니 해당 방식을 원하는 경우 <a href=\"https://create-react-app.dev/docs/adding-custom-environment-variables/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">adding-custom-environment-variables</a>를 참조하자.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .monokai {\n    background-color: #272822;\n    color: #f8f8f2;\n  }\n  .monokai .mtk1 { color: #F8F8F2; }\n  .monokai .mtk9 { color: #66D9EF; }\n  .monokai .mtk7 { color: #F92672; }\n  .monokai .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","tableOfContents":"","fields":{"slug":"/posts/CRA(create-react-app)에서_민감정보_처리하기/","tagSlugs":["/tag/react-js/","/tag/javascript/","/tag/create-react-app/","/tag/환경변수/","/tag/민감정보/"]},"frontmatter":{"date":"2020-02-02 17:19:03.538761","description":"create-react-app을 이용하여 프로젝트를 진행하는 경우에 민감정보를 어떻게 관리하면 좋을지에 대해서 정리한다","tags":["react.js","javascript","create-react-app","환경변수","민감정보"],"title":"CRA(create-react-app)에서 민감정보 처리하기","socialImage":null},"headings":[]}},"pageContext":{"slug":"/posts/CRA(create-react-app)에서_민감정보_처리하기/"}},"staticQueryHashes":["251939775","3691206191","401334301"]}